var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Command.html",[0,0.739,1,0.892]],["body/interfaces/Command.html",[0,0.85,1,1.396,2,0.766,3,0.44,4,0.44,5,0.299,6,0.24,7,0.365,8,0.528,9,0.528,10,1.265,11,2.743,12,1.324,13,2.434,14,0.711,15,0.074,16,1.025,17,0.711,18,1.237,19,1.237,20,0.365,21,0.766,22,0.766,23,1.784,24,1.957,25,0.634,26,1.784,27,1.957,28,0.766,29,0.766,30,0.85,31,0.766,32,0.634,33,0.766,34,0.766,35,0.766,36,1.237,37,1.237,38,0.766,39,1.555,40,1.784,41,0.766,42,0.634,43,0.634,44,0.766,45,2.01,46,0.766,47,1.237,48,0.766,49,1.237,50,0.766,51,0.766,52,0.766,53,0.766,54,1.732,55,1.619,56,2.609,57,0.634,58,0.634,59,1.535,60,1.025,61,1.555,62,2.781,63,1.555,64,1.957,65,2.875,66,1.555,67,1.555,68,1.555,69,1.555,70,1.555,71,1.555,72,1.555,73,1.555,74,1.555,75,1.555,76,1.555,77,1.555,78,1.555,79,0.853,80,1.555,81,0.766,82,1.555,83,0.711,84,0.589,85,0.853,86,2.484,87,0.766,88,1.237,89,1.476,90,0.766,91,1.745,92,2.948,93,1.237,94,1.265,95,1.555,96,1.317,97,1.237,98,0.634,99,0.766,100,0.766,101,0.766,102,0.634,103,1.237,104,0.766,105,1.237,106,0.766,107,0.853,108,1.023,109,0.853,110,1.476,111,0.766,112,0.634,113,0.44,114,1.784,115,0.853,116,0.766,117,0.634,118,1.237,119,0.853,120,1.023,121,0.766,122,0.766,123,1.555,124,0.766,125,0.766,126,0.766,127,0.766,128,0.766,129,0.766,130,0.766,131,0.766,132,0.766,133,1.237,134,1.632,135,0.766,136,0.766,137,1.237,138,0.766,139,0.766,140,0.766,141,0.766,142,0.766,143,0.766,144,0.766,145,0.766,146,0.766,147,0.766,148,0.766,149,0.766,150,0.766,151,0.766,152,0.766,153,0.766,154,1.23,155,1.555,156,0.766,157,0.766,158,0.766,159,0.766,160,0.766,161,0.766,162,0.766,163,0.766,164,0.766,165,2.202,166,0.766,167,0.766,168,0.766,169,0.766,170,0.766,171,0.766,172,0.766,173,0.766,174,1.237,175,0.766,176,0.766,177,1.023,178,1.023,179,1.023,180,1.237,181,1.237,182,1.476,183,1.555,184,0.766,185,1.023,186,0.766,187,2.202,188,1.476,189,0.634,190,0.766,191,0.766,192,0.766,193,0.766,194,1.476,195,1.23,196,0.766,197,2.484,198,0.766,199,0.634,200,0.634,201,0.766,202,2.202,203,0.766,204,0.766,205,2.093,206,0.634,207,0.766,208,2.093,209,0.766,210,0.766,211,0.634,212,0.766,213,0.634,214,0.766,215,0.634,216,0.766,217,0.766,218,1.286,219,0.634,220,0.634,221,1.023,222,0.766,223,0.766,224,0.634,225,0.634,226,0.634,227,1.023,228,0.634,229,0.766,230,0.528,231,2.721,232,1.237,233,0.766,234,0.766,235,1.237,236,2.269,237,1.286,238,1.237,239,1.237,240,0.766,241,1.822,242,1.957,243,1.023,244,0.711,245,1.957,246,0.766,247,1.023,248,0.766,249,0.766,250,0.766,251,2.21,252,2.366,253,1.957,254,2.366,255,1.237,256,0.766,257,0.766,258,0.766,259,1.896,260,0.766,261,0.766,262,1.237,263,0.766,264,0.766,265,1.555,266,1.286,267,0.766,268,1.286,269,1.023,270,0.766,271,1.237,272,0.766,273,0.766,274,1.286,275,0.766,276,0.766,277,0.766,278,0.766,279,0.634,280,1.237,281,0.766,282,0.766,283,0.766,284,0.766,285,0.766,286,0.766,287,0.766,288,2.429,289,0.634,290,0.766,291,0.766,292,0.528,293,1.237,294,0.766,295,0.766,296,0.634,297,0.634,298,0.766,299,1.023,300,1.237,301,0.766,302,0.634,303,1.237,304,0.766,305,0.766,306,0.766,307,0.766,308,1.237,309,0.766,310,0.766,311,0.766,312,1.555,313,1.237,314,0.766,315,0.766,316,0.766,317,0.766,318,2.093,319,0.766,320,0.766,321,0.766,322,1.237,323,0.766,324,0.766,325,1.237,326,0.44,327,0.766,328,0.766,329,1.237,330,0.766,331,0.766,332,0.766,333,0.766,334,0.766,335,0.766,336,1.023,337,0.766,338,0.766,339,0.766,340,1.237,341,0.766,342,0.766,343,0.766,344,0.766,345,1.555,346,0.766,347,0.766,348,0.766,349,0.766,350,0.766,351,0.766,352,0.766,353,0.634,354,1.286,355,1.555,356,0.766,357,0.766,358,0.766,359,1.237,360,0.766,361,0.634,362,0.44,363,0.634,364,0.766,365,0.766,366,1.784,367,0.766,368,0.766,369,0.766,370,1.237,371,0.766,372,0.766,373,2.093,374,1.237,375,0.766,376,0.766,377,1.286,378,1.237,379,0.766,380,0.766,381,0.766,382,1.784,383,1.957,384,0.766,385,0.766,386,0.766,387,0.766,388,1.237,389,0.766,390,1.555,391,1.237,392,1.237,393,1.237,394,1.555,395,1.784,396,1.237,397,0.766,398,0.766,399,0.766,400,0.766,401,1.023,402,0.766,403,0.766,404,0.44,405,0.528,406,0.766,407,0.766,408,0.766,409,0.766,410,0.766,411,0.766,412,0.766,413,0.766,414,0.766,415,0.766,416,0.766,417,0.766,418,0.766,419,0.766,420,0.766,421,0.766,422,0.528,423,0.766,424,0.766,425,0.766,426,0.766,427,0.766,428,0.766,429,2.202,430,2.202,431,2.202,432,0.766,433,2.093,434,0.766,435,0.029,436,0.029]],["title/interfaces/EventProperties.html",[0,0.739,79,1.07]],["body/interfaces/EventProperties.html",[0,0.852,1,1.362,2,0.77,3,0.442,4,0.442,5,0.3,6,0.39,7,0.591,8,0.531,10,1.127,11,2.674,12,1.297,13,2.417,15,0.074,16,1.028,17,0.713,18,1.241,19,1.241,20,0.367,21,0.77,22,0.77,23,1.789,24,1.962,25,0.637,26,1.789,27,1.962,28,0.77,29,0.77,30,0.852,31,0.77,32,0.637,33,0.77,34,0.77,35,0.77,36,1.241,37,1.241,38,0.77,39,1.559,40,1.789,41,0.77,42,0.637,43,0.637,44,0.77,45,2.013,46,0.77,47,1.241,48,0.77,49,1.241,50,0.77,51,0.77,52,0.77,53,0.77,54,1.735,55,1.623,56,2.612,57,0.637,58,0.637,59,1.536,60,1.028,61,1.559,62,2.783,63,1.559,64,1.962,65,2.877,66,1.559,67,1.559,68,1.559,69,1.559,70,1.559,71,1.559,72,1.559,73,1.559,74,1.559,75,1.559,76,1.559,77,1.559,78,1.559,79,1.075,80,1.789,81,0.77,82,1.559,83,0.713,84,0.591,85,0.856,86,2.487,87,0.77,88,1.241,89,1.48,90,0.77,91,1.747,92,2.95,93,1.241,94,1.268,95,1.559,96,1.319,97,1.241,98,0.637,99,0.77,100,0.77,101,0.77,102,0.637,103,1.241,104,0.77,105,1.241,106,0.77,107,0.856,108,1.027,109,0.856,110,1.48,111,0.77,112,0.637,113,0.442,114,1.789,115,0.856,116,0.77,117,0.637,118,1.241,119,1.075,120,1.027,121,0.77,122,0.77,123,1.559,124,0.77,125,0.77,126,0.77,127,0.77,128,0.77,129,0.77,130,0.77,131,0.77,132,0.77,133,1.241,134,1.633,135,0.77,136,0.77,137,1.241,138,0.77,139,0.77,140,0.77,141,0.77,142,0.77,143,0.77,144,0.77,145,0.77,146,0.77,147,0.77,148,0.77,149,0.77,150,0.77,151,0.77,152,0.77,153,0.77,154,1.233,155,1.559,156,0.77,157,0.77,158,0.77,159,0.77,160,0.77,161,0.77,162,0.77,163,0.77,164,0.77,165,2.206,166,0.77,167,0.77,168,0.77,169,0.77,170,0.77,171,0.77,172,0.77,173,0.77,174,1.241,175,0.77,176,0.77,177,1.027,178,1.027,179,1.027,180,1.241,181,1.241,182,1.48,183,1.559,184,0.77,185,1.027,186,0.77,187,2.206,188,1.48,189,0.637,190,0.77,191,0.77,192,0.77,193,0.77,194,1.48,195,1.233,196,0.77,197,2.487,198,0.77,199,0.637,200,0.637,201,0.77,202,2.206,203,0.77,204,0.77,205,2.097,206,0.637,207,0.77,208,2.097,209,0.77,210,0.77,211,0.637,212,0.77,213,0.637,214,0.77,215,0.637,216,0.77,217,0.77,218,1.29,219,0.637,220,0.637,221,1.027,222,0.77,223,0.77,224,0.637,225,0.637,226,0.637,227,1.027,228,0.637,229,0.77,230,0.531,231,2.724,232,1.241,233,0.77,234,0.77,235,1.241,236,2.271,237,1.29,238,1.241,239,1.241,240,0.77,241,1.825,242,1.962,243,1.027,244,0.713,245,1.962,246,0.77,247,1.027,248,0.77,249,0.77,250,0.77,251,2.212,252,2.37,253,1.961,254,2.37,255,1.241,256,0.77,257,0.77,258,0.77,259,1.899,260,0.77,261,0.77,262,1.241,263,0.77,264,0.77,265,1.559,266,1.29,267,0.77,268,1.29,269,1.027,270,0.77,271,1.241,272,0.77,273,0.77,274,1.29,275,0.77,276,0.77,277,0.77,278,0.77,279,0.637,280,1.241,281,0.77,282,0.77,283,0.77,284,0.77,285,0.77,286,0.77,287,0.77,288,2.433,289,0.637,290,0.77,291,0.77,292,0.531,293,1.241,294,0.77,295,0.77,296,0.637,297,0.637,298,0.77,299,1.027,300,1.241,301,0.77,302,0.637,303,1.241,304,0.77,305,0.77,306,0.77,307,0.77,308,1.241,309,0.77,310,0.77,311,0.77,312,1.559,313,1.241,314,0.77,315,0.77,316,0.77,317,0.77,318,2.097,319,0.77,320,0.77,321,0.77,322,1.241,323,0.77,324,0.77,325,1.241,326,0.442,327,0.77,328,0.77,329,1.241,330,0.77,331,0.77,332,0.77,333,0.77,334,0.77,335,0.77,336,1.027,337,0.77,338,0.77,339,0.77,340,1.241,341,0.77,342,0.77,343,0.77,344,0.77,345,1.559,346,0.77,347,0.77,348,0.77,349,0.77,350,0.77,351,0.77,352,0.77,353,0.637,354,1.29,355,1.559,356,0.77,357,0.77,358,0.77,359,1.241,360,0.77,361,0.637,362,0.442,363,0.637,364,0.77,365,0.77,366,1.789,367,0.77,368,0.77,369,0.77,370,1.241,371,0.77,372,0.77,373,2.097,374,1.241,375,0.77,376,0.77,377,1.29,378,1.241,379,0.77,380,0.77,381,0.77,382,1.789,383,1.962,384,0.77,385,0.77,386,0.77,387,0.77,388,1.241,389,0.77,390,1.559,391,1.241,392,1.241,393,1.241,394,1.559,395,1.789,396,1.241,397,0.77,398,0.77,399,0.77,400,0.77,401,1.027,402,0.77,403,0.77,404,0.442,405,0.531,406,0.77,407,0.77,408,0.77,409,0.77,410,0.77,411,0.77,412,0.77,413,0.77,414,0.77,415,0.77,416,0.77,417,0.77,418,0.77,419,0.77,420,0.77,421,0.77,422,0.531,423,0.77,424,0.77,425,0.77,426,0.77,427,0.77,428,0.77,429,2.206,430,2.206,431,2.206,432,0.77,433,2.097,434,0.77,435,0.029,436,0.029,437,1.218,438,1.218]],["title/modules/NgSafeStylePipeModule.html",[439,1.07,440,0.892]],["body/modules/NgSafeStylePipeModule.html",[3,1.201,4,1.201,5,0.816,6,0.656,12,0.996,15,0.073,16,1.453,20,0.996,60,1.453,83,1.453,85,1.441,96,1.201,113,1.201,119,1.441,134,1.201,195,1.441,230,1.441,292,1.441,326,1.201,404,1.201,435,0.059,436,0.059,439,1.441,440,1.71,441,1.441,442,1.441,443,2.09,444,2.25,445,2.09,446,2.09,447,2.25,448,2.574,449,2.574,450,2.574,451,2.114,452,2.529,453,1.729,454,2.09,455,2.09,456,1.624,457,3.114,458,2.529,459,3.348,460,2.09,461,1.729,462,2.09,463,2.529,464,2.574,465,2.574,466,2.09,467,2.574,468,2.574,469,2.574,470,2.09,471,2.09,472,2.574,473,2.09,474,2.574,475,2.574,476,2.574,477,2.574,478,2.574]],["title/modules/PlayerClientModule.html",[439,1.07,479,1.284]],["body/modules/PlayerClientModule.html",[3,1.164,4,1.164,5,0.791,6,0.636,7,0.965,15,0.074,16,1.699,20,0.965,30,0.965,57,1.676,58,1.676,60,1.164,83,1.164,84,1.182,91,1.396,94,1.164,134,1.541,154,1.396,251,1.676,253,1.676,326,1.164,362,1.164,405,1.396,422,1.849,435,0.058,436,0.058,439,1.396,440,1.715,441,1.396,442,1.396,443,2.025,444,1.676,445,2.025,446,2.481,447,2.219,452,2.481,453,1.676,458,2.481,462,2.025,479,2.373,480,2.494,481,2.494,482,1.676,483,3.926,484,3.926,485,3.205,486,3.303,487,3.205,488,3.926,489,3.205,490,3.205,491,2.494,492,3.926,493,2.494,494,3.205,495,3.205,496,3.205,497,3.926,498,2.025,499,3.205,500,3.205,501,3.205,502,3.205,503,3.205,504,3.205,505,3.205,506,3.205,507,2.494,508,3.205,509,3.205]],["title/injectables/PlayerClientService.html",[17,0.892,84,0.739]],["body/injectables/PlayerClientService.html",[0,0.805,1,1.417,3,0.336,4,0.336,5,0.228,6,0.835,7,1.267,8,0.403,9,0.403,10,1.271,11,2.64,12,1.348,13,2.423,14,1.123,15,0.074,16,0.869,17,0.569,18,0.99,19,0.99,20,0.279,21,0.585,22,0.585,23,1.954,24,1.69,25,0.484,26,1.954,27,1.69,28,0.585,29,0.585,30,0.931,31,0.585,32,0.484,33,0.585,34,0.585,35,0.585,36,0.99,37,0.99,38,0.585,39,1.286,40,1.512,41,0.585,42,0.484,43,0.484,44,0.585,45,1.971,46,0.585,47,1.286,48,0.585,49,0.99,50,0.585,51,0.585,52,0.585,53,0.585,54,1.518,55,1.398,56,2.427,57,0.484,58,0.484,59,1.474,60,0.869,61,1.512,62,2.761,63,1.512,64,2.054,65,2.856,66,1.835,67,1.835,68,1.835,69,1.835,70,1.835,71,1.512,72,1.512,73,1.512,74,1.512,75,1.512,76,1.835,77,1.835,78,1.835,79,1.042,80,1.69,81,0.585,82,1.69,83,0.569,84,0.805,85,0.682,86,2.276,87,0.585,88,0.99,89,1.699,90,0.99,91,1.861,92,3.03,93,1.512,94,1.308,95,1.835,96,1.438,97,1.286,98,0.819,99,0.99,100,1.286,101,0.99,102,0.819,103,1.512,104,0.99,105,1.512,106,0.585,107,1.042,108,1.064,109,0.682,110,1.251,111,0.585,112,0.484,113,0.336,114,1.954,115,0.682,116,0.585,117,0.484,118,1.286,119,1.861,120,0.819,121,0.585,122,0.585,123,1.286,124,0.585,125,0.585,126,0.585,127,0.585,128,0.585,129,0.585,130,0.585,131,0.585,132,0.585,133,0.99,134,1.561,135,0.585,136,0.585,137,0.99,138,0.585,139,0.585,140,0.585,141,0.585,142,0.585,143,0.585,144,0.585,145,0.585,146,0.585,147,0.585,148,0.585,149,0.585,150,0.585,151,0.585,152,0.585,153,0.585,154,1.042,155,1.286,156,0.585,157,0.585,158,0.585,159,0.585,160,0.585,161,0.585,162,0.585,163,0.585,164,0.585,165,1.954,166,0.585,167,0.585,168,0.585,169,0.585,170,0.585,171,0.585,172,0.585,173,0.585,174,0.99,175,0.585,176,0.585,177,1.064,178,1.064,179,0.819,180,0.99,181,0.99,182,1.699,183,1.69,184,0.99,185,1.251,186,0.99,187,2.427,188,1.699,189,0.819,190,0.99,191,1.512,192,0.99,193,0.99,194,1.398,195,1.347,196,0.99,197,2.276,198,0.99,199,0.819,200,0.819,201,0.99,202,1.954,203,0.585,204,0.585,205,1.835,206,0.484,207,0.585,208,1.835,209,0.585,210,0.585,211,0.484,212,0.585,213,0.484,214,0.585,215,0.484,216,0.585,217,0.99,218,1.518,219,0.819,220,0.819,221,1.064,222,0.585,223,0.99,224,0.819,225,0.819,226,1.064,227,1.398,228,1.064,229,1.286,230,0.682,231,2.9,232,1.286,233,1.512,234,0.585,235,1.512,236,2.37,237,1.518,238,1.512,239,1.512,240,0.99,241,2.008,242,2.213,243,1.251,244,1.308,245,2.213,246,0.99,247,1.251,248,0.99,249,0.99,250,0.99,251,2.341,252,2.139,253,1.77,254,2.139,255,0.99,256,0.585,257,0.585,258,0.585,259,2.041,260,0.585,261,0.99,262,1.512,263,0.99,264,0.585,265,1.835,266,1.398,267,0.585,268,1.518,269,1.251,270,0.585,271,1.512,272,0.99,273,0.585,274,1.518,275,0.99,276,0.99,277,0.99,278,0.99,279,0.819,280,1.512,281,0.99,282,0.99,283,0.99,284,0.99,285,0.99,286,0.585,287,0.99,288,2.535,289,0.819,290,0.99,291,0.99,292,0.682,293,1.512,294,0.99,295,0.99,296,0.819,297,0.819,298,0.99,299,1.064,300,1.286,301,0.99,302,0.819,303,1.512,304,0.99,305,0.585,306,0.585,307,0.99,308,1.512,309,0.99,310,0.99,311,0.99,312,1.835,313,1.835,314,0.99,315,0.99,316,0.99,317,0.585,318,2.333,319,0.99,320,0.99,321,0.99,322,1.512,323,0.99,324,0.99,325,1.512,326,0.569,327,0.99,328,0.99,329,1.835,330,0.99,331,0.99,332,0.99,333,0.99,334,0.585,335,0.585,336,1.251,337,0.99,338,0.99,339,0.585,340,1.512,341,0.585,342,0.585,343,0.99,344,0.99,345,1.512,346,0.99,347,0.99,348,0.99,349,0.99,350,0.99,351,0.99,352,0.585,353,0.819,354,1.518,355,1.835,356,0.99,357,0.99,358,0.99,359,1.512,360,0.99,361,0.819,362,0.569,363,0.819,364,1.512,365,0.585,366,1.512,367,0.585,368,0.585,369,0.585,370,0.99,371,0.585,372,0.585,373,1.835,374,0.99,375,0.585,376,0.585,377,1.064,378,0.99,379,0.585,380,0.585,381,0.585,382,1.512,383,1.69,384,0.585,385,0.585,386,0.585,387,0.585,388,0.99,389,0.585,390,1.286,391,0.99,392,0.99,393,0.99,394,1.286,395,1.512,396,0.99,397,0.585,398,0.585,399,0.585,400,0.585,401,0.819,402,0.585,403,0.585,404,0.336,405,0.403,406,0.585,407,0.585,408,0.585,409,0.585,410,0.585,411,0.585,412,0.585,413,0.585,414,0.585,415,0.585,416,0.585,417,0.585,418,0.585,419,0.585,420,0.585,421,0.585,422,0.403,423,0.585,424,0.585,425,0.585,426,0.585,427,0.585,428,0.585,429,1.954,430,1.954,431,1.954,432,0.585,433,1.835,434,0.585,435,0.023,436,0.023,510,0.926,511,1.566,512,1.566,513,1.566,514,1.566,515,0.926,516,1.954,517,1.954,518,0.926,519,0.926,520,0.926,521,0.926,522,0.926,523,0.926,524,2.034,525,0.926,526,0.926,527,0.926,528,0.926,529,0.926,530,0.926,531,0.926,532,0.926,533,0.926,534,0.926,535,0.926,536,0.926,537,0.926,538,0.926,539,0.926,540,0.926,541,0.926,542,1.512,543,1.251,544,0.926,545,0.926,546,0.926,547,0.926]],["title/pipes/SafeStylePipe.html",[451,1.07,456,0.892]],["body/pipes/SafeStylePipe.html",[3,1.189,4,1.189,5,0.808,6,0.789,12,1.29,14,1.189,15,0.073,16,1.445,20,0.986,60,1.445,83,1.445,85,1.427,96,1.445,107,1.427,113,1.445,119,1.867,134,1.189,195,1.427,230,1.733,244,1.189,292,1.733,404,1.445,435,0.059,436,0.059,440,1.189,444,1.712,447,1.712,451,1.942,454,2.514,455,2.07,456,1.686,457,3.096,458,2.514,459,3.468,460,2.07,461,1.712,462,2.514,463,2.817,464,3.096,465,3.096,466,2.514,467,3.096,468,3.096,469,3.096,470,2.514,471,2.514,472,3.096,473,2.514,474,2.548,475,2.548,476,3.096,477,2.548,478,2.548,516,2.07,517,2.07,543,1.712,548,3.275,549,3.275,550,3.275,551,3.275]],["title/coverage.html",[552,2.573]],["body/coverage.html",[0,1.232,1,1.247,5,0.847,6,0.959,7,1.413,8,1.973,14,1.247,15,0.072,17,1.247,30,1.034,59,1.247,79,1.496,84,1.034,94,1.247,154,1.496,199,2.419,206,2.5,435,0.06,436,0.06,451,1.496,454,2.17,455,2.17,456,1.247,482,2.14,498,2.17,552,2.672,553,2.672,554,3.434,555,3.434,556,2.672,557,2.672,558,2.672,559,4.744,560,3.434,561,3.434,562,3.434,563,3.434,564,3.434,565,3.185,566,2.672,567,2.672,568,3.434,569,3.434]],["title/dependencies.html",[442,1.281,570,1.612]],["body/dependencies.html",[15,0.073,20,1.086,25,1.887,435,0.062,436,0.062,442,1.573,460,2.664,461,2.204,491,2.808,493,2.808,571,3.609,572,4.848,573,3.609,574,3.609,575,3.609,576,2.808,577,3.609,578,3.609,579,3.609,580,3.609,581,3.609,582,3.609,583,3.609,584,3.609,585,3.609,586,3.609,587,3.609]],["title/miscellaneous/functions.html",[588,0.903,589,2.288]],["body/miscellaneous/functions.html",[6,0.746,7,1.132,9,1.639,12,1.132,14,1.366,15,0.067,244,1.366,435,0.064,436,0.064,482,2.257,486,3.533,498,2.728,507,2.926,516,2.377,588,1.639,589,2.926,590,2.926]],["title/index.html",[9,0.903,102,1.083,591,1.612]],["body/index.html",[0,0.837,1,1.01,5,0.981,10,1.304,12,1.354,13,1.878,15,0.073,30,0.985,32,1.002,42,1.994,43,1.994,45,1.002,54,1.994,55,2.197,59,1.304,84,0.837,89,1.002,91,1.661,94,1.526,96,1.726,98,1.454,107,1.426,108,1.002,109,0.835,110,1.711,112,2.079,113,0.696,115,1.212,117,1.454,120,1.002,177,2.275,178,2.275,179,1.454,182,1.002,185,1.002,188,1.002,189,1.002,194,1.002,200,1.002,211,1.002,213,1.002,215,1.002,218,1.711,219,2.197,220,1.002,221,1.454,224,1.002,225,1.454,226,1.002,227,1.002,228,1.454,236,1.454,237,1.878,241,1.002,243,1.711,244,1.01,247,1.002,259,1.002,266,1.454,268,1.002,269,1.454,274,1.994,279,1.994,289,1.878,296,1.002,297,1.002,299,1.002,302,1.002,336,1.454,353,1.002,354,1.002,361,1.002,362,1.385,363,1.002,377,1.711,401,1.002,404,1.658,405,1.92,422,0.835,435,0.048,436,0.041,453,1.002,456,0.696,463,2.069,466,1.211,470,1.211,471,2.656,473,1.211,517,2.069,542,1.211,543,1.994,553,2.547,576,1.491,588,0.835,591,1.491,592,1.917,593,1.917,594,1.917,595,1.917,596,1.917,597,3.591,598,1.917,599,1.917,600,2.781,601,1.917,602,1.917,603,1.917,604,2.781,605,3.813,606,3.813,607,1.917,608,2.781,609,1.917,610,2.781,611,1.917,612,1.917,613,1.917,614,1.917,615,3.273,616,2.781,617,3.273,618,1.917,619,1.917,620,1.917,621,1.917,622,1.917,623,2.781,624,4.103,625,1.917,626,2.781,627,1.917,628,1.917,629,1.917,630,1.917,631,1.917,632,3.591,633,1.917,634,1.917,635,1.917,636,1.917,637,1.917,638,2.781,639,3.273,640,2.781,641,1.917,642,1.917,643,3.273,644,1.917,645,1.917,646,2.781,647,1.917,648,1.917,649,1.917,650,1.917,651,2.781,652,1.917,653,2.781,654,1.917,655,1.917,656,1.917,657,1.917,658,2.781,659,1.917,660,1.917,661,1.917,662,2.781,663,1.917,664,3.273,665,1.917,666,1.917,667,1.917,668,1.917,669,1.917,670,1.917,671,1.917,672,1.917,673,1.917,674,1.917,675,1.917,676,1.917,677,1.917,678,1.917,679,2.781,680,1.917,681,1.917,682,1.917,683,1.917,684,1.917,685,1.917,686,1.917,687,1.917,688,1.917,689,1.917,690,1.917,691,1.917,692,1.917,693,1.917,694,1.917,695,2.781,696,3.273,697,1.917,698,2.794,699,2.781,700,2.781,701,1.917,702,1.917,703,1.917,704,2.781,705,3.591,706,1.917,707,1.917,708,1.917,709,3.273,710,3.273,711,2.781,712,2.781,713,2.781,714,3.273,715,2.781,716,1.917,717,1.917,718,1.917,719,1.917,720,2.781,721,1.917,722,1.917,723,1.917,724,3.273,725,2.781,726,3.813,727,1.917,728,1.917,729,3.273,730,1.917,731,1.917,732,2.781,733,1.917,734,1.917,735,2.781,736,3.273,737,1.917,738,1.917,739,3.273,740,1.917,741,2.781,742,1.917,743,1.917,744,1.917,745,2.781,746,1.917,747,1.917,748,1.917,749,1.211,750,2.781,751,3.273,752,2.781,753,1.917,754,1.917,755,1.917,756,1.917,757,1.917,758,1.917,759,4.284,760,3.977,761,1.917,762,3.977,763,3.273,764,1.917,765,2.781,766,3.591,767,3.977,768,3.977,769,1.917,770,1.917,771,1.917,772,3.591,773,1.917,774,1.917,775,1.917,776,2.781,777,2.781,778,1.917,779,1.917,780,1.917,781,1.917,782,1.917,783,1.917,784,1.917,785,1.917,786,1.491,787,2.781,788,3.591,789,1.917,790,1.917,791,1.917,792,1.917,793,1.917,794,1.917,795,2.781,796,3.273,797,2.781,798,1.917,799,1.917,800,1.917,801,1.917,802,1.917,803,1.917,804,1.917,805,1.917,806,1.917,807,1.917,808,1.917,809,1.917,810,1.917,811,1.917,812,1.917,813,1.917,814,1.917,815,1.917]],["title/modules.html",[441,1.441]],["body/modules.html",[15,0.064,435,0.064,436,0.064,440,1.381,441,1.657,461,2.272,479,1.989,698,3.381,816,4.344,817,4.344]],["title/overview.html",[749,2.09]],["body/overview.html",[2,2.287,15,0.069,17,1.314,109,1.84,115,1.84,326,1.314,435,0.062,436,0.062,439,1.577,440,1.761,441,1.577,442,1.577,443,2.287,444,1.892,445,2.287,446,2.287,447,1.892,448,2.816,449,2.816,450,2.816,451,2.088,452,2.668,453,1.892,456,1.314,479,2.337,480,2.816,481,2.816,749,2.287]],["title/properties.html",[10,1.068,570,1.612]],["body/properties.html",[10,1.395,15,0.067,435,0.064,436,0.064,818,3.841,819,3.841]],["title/miscellaneous/variables.html",[588,0.903,820,2.288]],["body/miscellaneous/variables.html",[6,0.911,7,1.264,8,1.829,9,1.562,14,1.699,15,0.071,30,1.264,59,1.617,362,1.302,435,0.062,436,0.062,482,2.195,542,2.654,543,2.195,556,2.79,557,3.267,558,3.267,565,2.79,566,3.267,567,3.267,588,1.562,590,3.267,786,2.79,820,2.79,821,4.199,822,3.585,823,3.585,824,3.585,825,3.585,826,3.585]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":206,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":819,"title":{},"body":{"properties.html":{}}}],["0.11.4",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":109,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{},"overview.html":{}}}],["1.1.20150312",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["1.6.28",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["13.0.0",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":115,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{},"overview.html":{}}}],["2.4.1",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["21/22",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":791,"title":{},"body":{"index.html":{}}}],["255);font",{"_index":792,"title":{},"body":{"index.html":{}}}],["3",{"_index":211,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["39;this&#39",{"_index":519,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["3rd",{"_index":382,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["4",{"_index":213,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["5",{"_index":215,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["6.13.0",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["7.4.0",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["95",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["access",{"_index":678,"title":{},"body":{"index.html":{}}}],["accessed",{"_index":806,"title":{},"body":{"index.html":{}}}],["accessible",{"_index":755,"title":{},"body":{"index.html":{}}}],["accessor",{"_index":217,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["accessors",{"_index":674,"title":{},"body":{"index.html":{}}}],["account",{"_index":281,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["act",{"_index":424,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["acted",{"_index":192,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["active",{"_index":340,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["actually",{"_index":48,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["ad",{"_index":391,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["add",{"_index":617,"title":{},"body":{"index.html":{}}}],["adhawk",{"_index":290,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["all_of",{"_index":778,"title":{},"body":{"index.html":{}}}],["allow",{"_index":706,"title":{},"body":{"index.html":{}}}],["allows",{"_index":183,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["along",{"_index":638,"title":{},"body":{"index.html":{}}}],["always",{"_index":719,"title":{},"body":{"index.html":{}}}],["analytics",{"_index":291,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["angular",{"_index":404,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"index.html":{}}}],["angular/animations",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":493,"title":{},"body":{"modules/PlayerClientModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":489,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["angular/compiler",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":20,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["angular/localize",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":460,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{},"dependencies.html":{}}}],["angular/router",{"_index":491,"title":{},"body":{"modules/PlayerClientModule.html":{},"dependencies.html":{}}}],["another",{"_index":332,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["any).reveldigital",{"_index":152,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["any_of",{"_index":777,"title":{},"body":{"index.html":{}}}],["api",{"_index":45,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["app",{"_index":405,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["app_base_href",{"_index":492,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["app_initializer",{"_index":483,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["appear",{"_index":711,"title":{},"body":{"index.html":{}}}],["appied",{"_index":468,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{}}}],["appinitservice",{"_index":486,"title":{},"body":{"modules/PlayerClientModule.html":{},"miscellaneous/functions.html":{}}}],["appinitservice.init",{"_index":509,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["applicable",{"_index":351,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["applications",{"_index":747,"title":{},"body":{"index.html":{}}}],["applied",{"_index":465,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{}}}],["appropriate",{"_index":186,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["appstep",{"_index":630,"title":{},"body":{"index.html":{}}}],["aren't",{"_index":51,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["arg",{"_index":11,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["args",{"_index":198,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["args.length",{"_index":204,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["argument",{"_index":272,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["arguments",{"_index":201,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["array",{"_index":284,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["assert",{"_index":397,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["assets/gadget.yaml",{"_index":692,"title":{},"body":{"index.html":{}}}],["assigned",{"_index":242,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["associate",{"_index":304,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["associated",{"_index":269,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["assuming",{"_index":652,"title":{},"body":{"index.html":{}}}],["async",{"_index":251,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{}}}],["augment",{"_index":38,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["author",{"_index":714,"title":{},"body":{"index.html":{}}}],["available",{"_index":54,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["await",{"_index":253,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{}}}],["b",{"_index":316,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["back",{"_index":394,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["background",{"_index":179,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["based",{"_index":248,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["basic",{"_index":695,"title":{},"body":{"index.html":{}}}],["before",{"_index":385,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["behaviorsubject",{"_index":21,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["behaviorsubject(false",{"_index":101,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["being",{"_index":357,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["believe",{"_index":403,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["bind",{"_index":409,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["blocked",{"_index":390,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["blocker",{"_index":392,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["boilerplate",{"_index":629,"title":{},"body":{"index.html":{}}}],["bool",{"_index":765,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":786,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":445,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"overview.html":{}}}],["bootstrapped",{"_index":407,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["both",{"_index":756,"title":{},"body":{"index.html":{}}}],["branch",{"_index":655,"title":{},"body":{"index.html":{}}}],["break",{"_index":208,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["browse",{"_index":817,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":461,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{},"dependencies.html":{},"modules.html":{}}}],["build",{"_index":597,"title":{},"body":{"index.html":{}}}],["build:gadget",{"_index":641,"title":{},"body":{"index.html":{}}}],["building",{"_index":592,"title":{},"body":{"index.html":{}}}],["c",{"_index":175,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["caching",{"_index":731,"title":{},"body":{"index.html":{}}}],["call",{"_index":312,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["callback",{"_index":191,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["callback(...args",{"_index":61,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["calling",{"_index":108,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["calls",{"_index":328,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["case",{"_index":205,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["catch",{"_index":503,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["cclient",{"_index":427,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["certain",{"_index":727,"title":{},"body":{"index.html":{}}}],["change",{"_index":708,"title":{},"body":{"index.html":{}}}],["changes",{"_index":301,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["check",{"_index":353,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["class",{"_index":83,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{}}}],["classlist.js",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["cli",{"_index":625,"title":{},"body":{"index.html":{}}}],["client",{"_index":59,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["client.callback",{"_index":207,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.callback(&#39;test&#39",{"_index":518,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.callback('test",{"_index":196,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.callback(args[0",{"_index":209,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.callback(args[1",{"_index":210,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.callback(args[2",{"_index":212,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.callback(args[3",{"_index":214,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.callback(args[4",{"_index":216,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.finish",{"_index":352,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.getcommandmap",{"_index":342,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.getdevicekey",{"_index":270,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.getdevicetime",{"_index":257,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.getdevicetime(date",{"_index":256,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.getdevicetimezoneid",{"_index":260,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.getdevicetimezonename",{"_index":258,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.getdevicetimezoneoffset",{"_index":264,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.getlanguagecode",{"_index":267,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.getprefs",{"_index":228,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["client.getrevelroot",{"_index":339,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.module.ts",{"_index":482,"title":{},"body":{"modules/PlayerClientModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["client.neweventsession",{"_index":334,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.neweventsession(id",{"_index":335,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.sendcommand(name",{"_index":273,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.sendremotecommand(devicekeys",{"_index":286,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.service",{"_index":485,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["client.service.ts",{"_index":8,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client.service.ts:187",{"_index":515,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:226",{"_index":529,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:238",{"_index":523,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:253",{"_index":526,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:265",{"_index":525,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:277",{"_index":527,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:289",{"_index":528,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:301",{"_index":522,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:314",{"_index":534,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:329",{"_index":535,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:343",{"_index":541,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:359",{"_index":536,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:373",{"_index":533,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:389",{"_index":531,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:401",{"_index":521,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:412",{"_index":520,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:426",{"_index":532,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:51",{"_index":438,"title":{},"body":{"interfaces/EventProperties.html":{}}}],["client.service.ts:71",{"_index":544,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:75",{"_index":545,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:79",{"_index":546,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.service.ts:83",{"_index":547,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.timeevent(&#39;testevent&#39",{"_index":537,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.timeevent('testevent",{"_index":314,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.timeevent(eventname",{"_index":317,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.track(\"test",{"_index":315,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client.track(&quot;test&quot",{"_index":538,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["client.track(eventname",{"_index":305,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["client/src/lib/app",{"_index":556,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/lib/player",{"_index":7,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["client/src/lib/safe",{"_index":454,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{},"coverage.html":{}}}],["client/src/test.ts",{"_index":565,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client@latest",{"_index":635,"title":{},"body":{"index.html":{}}}],["clientpromise",{"_index":87,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["cluster_ngsafestylepipemodule",{"_index":448,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"overview.html":{}}}],["cluster_ngsafestylepipemodule_declarations",{"_index":449,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"overview.html":{}}}],["cluster_ngsafestylepipemodule_exports",{"_index":450,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"overview.html":{}}}],["cluster_playerclientmodule",{"_index":480,"title":{},"body":{"modules/PlayerClientModule.html":{},"overview.html":{}}}],["cluster_playerclientmodule_exports",{"_index":481,"title":{},"body":{"modules/PlayerClientModule.html":{},"overview.html":{}}}],["cmd.arg",{"_index":687,"title":{},"body":{"index.html":{}}}],["cmd.name",{"_index":686,"title":{},"body":{"index.html":{}}}],["cms",{"_index":243,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["code",{"_index":266,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["color:blue",{"_index":180,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["color:yellow",{"_index":181,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["command",{"_index":1,"title":{"interfaces/Command.html":{}},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"coverage.html":{},"index.html":{}}}],["commands",{"_index":89,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["communicate",{"_index":184,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["complain",{"_index":35,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["complete",{"_index":370,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["completed",{"_index":400,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["component",{"_index":466,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{},"index.html":{}}}],["condition",{"_index":299,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["conditions",{"_index":781,"title":{},"body":{"index.html":{}}}],["configure",{"_index":633,"title":{},"body":{"index.html":{}}}],["configured",{"_index":602,"title":{},"body":{"index.html":{}}}],["console.log",{"_index":174,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["console.log(\"onstart",{"_index":689,"title":{},"body":{"index.html":{}}}],["console.log(\"onstop",{"_index":691,"title":{},"body":{"index.html":{}}}],["console.log(`oncommand",{"_index":685,"title":{},"body":{"index.html":{}}}],["console.log(val",{"_index":683,"title":{},"body":{"index.html":{}}}],["const",{"_index":252,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["constructor",{"_index":120,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["constructor(private",{"_index":474,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{}}}],["constructor(public",{"_index":226,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["constructor(zone",{"_index":150,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["consuming",{"_index":423,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["contained",{"_index":663,"title":{},"body":{"index.html":{}}}],["context",{"_index":566,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":153,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["copy",{"_index":614,"title":{},"body":{"index.html":{}}}],["core",{"_index":728,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":552,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":610,"title":{},"body":{"index.html":{}}}],["creating",{"_index":613,"title":{},"body":{"index.html":{}}}],["creation",{"_index":607,"title":{},"body":{"index.html":{}}}],["credited",{"_index":716,"title":{},"body":{"index.html":{}}}],["current",{"_index":235,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["currently",{"_index":187,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["custom",{"_index":113,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"index.html":{}}}],["customization",{"_index":704,"title":{},"body":{"index.html":{}}}],["datatype",{"_index":762,"title":{},"body":{"index.html":{}}}],["date",{"_index":64,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["date().toisostring",{"_index":432,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["date/time",{"_index":247,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["declarations",{"_index":444,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"pipes/SafeStylePipe.html":{},"overview.html":{}}}],["declare",{"_index":57,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{}}}],["default",{"_index":542,"title":{},"body":{"injectables/PlayerClientService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_value",{"_index":767,"title":{},"body":{"index.html":{}}}],["defined",{"_index":119,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{}}}],["defining",{"_index":694,"title":{},"body":{"index.html":{}}}],["definition",{"_index":42,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["delivered",{"_index":277,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["dependencies",{"_index":442,"title":{"dependencies.html":{}},"body":{"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependent",{"_index":775,"title":{},"body":{"index.html":{}}}],["depends",{"_index":772,"title":{},"body":{"index.html":{}}}],["deploy",{"_index":643,"title":{},"body":{"index.html":{}}}],["deploy:gadget",{"_index":659,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":718,"title":{},"body":{"index.html":{}}}],["deps",{"_index":499,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["describe",{"_index":722,"title":{},"body":{"index.html":{}}}],["description",{"_index":517,"title":{},"body":{"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"index.html":{}}}],["design",{"_index":709,"title":{},"body":{"index.html":{}}}],["designers",{"_index":707,"title":{},"body":{"index.html":{}}}],["designing",{"_index":802,"title":{},"body":{"index.html":{}}}],["details",{"_index":225,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["determined",{"_index":240,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["developers",{"_index":50,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["developing",{"_index":717,"title":{},"body":{"index.html":{}}}],["development",{"_index":603,"title":{},"body":{"index.html":{}}}],["device",{"_index":236,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["devicekeys",{"_index":283,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["devices",{"_index":278,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["digital",{"_index":178,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["directory",{"_index":627,"title":{},"body":{"index.html":{}}}],["dispatchevent",{"_index":111,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["display_name",{"_index":760,"title":{},"body":{"index.html":{}}}],["display_value",{"_index":796,"title":{},"body":{"index.html":{}}}],["docs",{"_index":744,"title":{},"body":{"index.html":{}}}],["document",{"_index":49,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["documentation",{"_index":553,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":34,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["dog|cat",{"_index":799,"title":{},"body":{"index.html":{}}}],["domsanitizer",{"_index":459,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{}}}],["duration",{"_index":310,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["dynamic",{"_index":576,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["e.detail.arg",{"_index":136,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["e.detail.name",{"_index":135,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["each",{"_index":322,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["easier",{"_index":596,"title":{},"body":{"index.html":{}}}],["edited",{"_index":358,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["editor",{"_index":803,"title":{},"body":{"index.html":{}}}],["en",{"_index":504,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["enable",{"_index":726,"title":{},"body":{"index.html":{}}}],["enabled",{"_index":356,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["ensure",{"_index":467,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{}}}],["enum",{"_index":763,"title":{},"body":{"index.html":{}}}],["environment",{"_index":361,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["etc",{"_index":302,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["even",{"_index":426,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["event",{"_index":288,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["eventname",{"_index":303,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["eventproperties",{"_index":79,"title":{"interfaces/EventProperties.html":{}},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"coverage.html":{}}}],["events",{"_index":114,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["example",{"_index":195,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{}}}],["experience",{"_index":801,"title":{},"body":{"index.html":{}}}],["export",{"_index":60,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{}}}],["exports",{"_index":447,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"pipes/SafeStylePipe.html":{},"overview.html":{}}}],["exposed",{"_index":220,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["exposes",{"_index":666,"title":{},"body":{"index.html":{}}}],["fail",{"_index":412,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["failed",{"_index":388,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["fall",{"_index":393,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["falling",{"_index":428,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["false",{"_index":363,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["falsethis",{"_index":800,"title":{},"body":{"index.html":{}}}],["family:verdana;color:rgb(255",{"_index":790,"title":{},"body":{"index.html":{}}}],["far",{"_index":399,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["fast",{"_index":788,"title":{},"body":{"index.html":{}}}],["fastest",{"_index":795,"title":{},"body":{"index.html":{}}}],["featured",{"_index":599,"title":{},"body":{"index.html":{}}}],["features",{"_index":696,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"coverage.html":{},"index.html":{}}}],["filter((messageevent",{"_index":142,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["finish",{"_index":78,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["finished",{"_index":344,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["fired",{"_index":374,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["folder",{"_index":336,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["following",{"_index":112,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["font",{"_index":735,"title":{},"body":{"index.html":{}}}],["format",{"_index":239,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["fr",{"_index":754,"title":{},"body":{"index.html":{}}}],["frames",{"_index":380,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["framework",{"_index":600,"title":{},"body":{"index.html":{}}}],["fromevent",{"_index":22,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["fromevent(document",{"_index":123,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["fromevent(window",{"_index":140,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["full",{"_index":598,"title":{},"body":{"index.html":{}}}],["function",{"_index":154,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"coverage.html":{}}}],["functionality",{"_index":662,"title":{},"body":{"index.html":{}}}],["functions",{"_index":589,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":418,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["gadget",{"_index":96,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"index.html":{}}}],["gadgets",{"_index":30,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["gadgets.prefs",{"_index":232,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["gadgets.prefs().getlang",{"_index":502,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["gadgets.yaml",{"_index":699,"title":{},"body":{"index.html":{}}}],["gadgets/all_all.xml",{"_index":752,"title":{},"body":{"index.html":{}}}],["gadgets/ifr",{"_index":506,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["generate",{"_index":637,"title":{},"body":{"index.html":{}}}],["generated",{"_index":325,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["generates",{"_index":628,"title":{},"body":{"index.html":{}}}],["getclient",{"_index":367,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["getcommandmap",{"_index":77,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["getdevicekey",{"_index":70,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["getdevicetime",{"_index":511,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["getdevicetime(date",{"_index":63,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["getdevicetimezoneid",{"_index":67,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["getdevicetimezonename",{"_index":66,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["getdevicetimezoneoffset",{"_index":68,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["getlanguagecode",{"_index":69,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["getprefs",{"_index":233,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["getrevelroot",{"_index":76,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["gets",{"_index":406,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["getting",{"_index":591,"title":{"index.html":{}},"body":{"index.html":{}}}],["gh",{"_index":654,"title":{},"body":{"index.html":{}}}],["git",{"_index":616,"title":{},"body":{"index.html":{}}}],["github",{"_index":605,"title":{},"body":{"index.html":{}}}],["github.com",{"_index":611,"title":{},"body":{"index.html":{}}}],["global",{"_index":39,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["gmt",{"_index":263,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["going",{"_index":37,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["google",{"_index":733,"title":{},"body":{"index.html":{}}}],["grouping",{"_index":320,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["guessing",{"_index":52,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["handlewindowload",{"_index":415,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["helpers",{"_index":675,"title":{},"body":{"index.html":{}}}],["here",{"_index":724,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":764,"title":{},"body":{"index.html":{}}}],["hosted",{"_index":644,"title":{},"body":{"index.html":{}}}],["hosting",{"_index":608,"title":{},"body":{"index.html":{}}}],["httpclientmodule",{"_index":488,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["https://angular.io/guide/i18n",{"_index":748,"title":{},"body":{"index.html":{}}}],["https://developers.google.com/gadgets/docs/basic",{"_index":223,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["https://developers.google.com/gadgets/docs/i18n",{"_index":746,"title":{},"body":{"index.html":{}}}],["https://github.com/reveldigital/reveldigital",{"_index":814,"title":{},"body":{"index.html":{}}}],["https://mysupporturl.org",{"_index":721,"title":{},"body":{"index.html":{}}}],["https://reveldigital.github.io/reveldigital",{"_index":751,"title":{},"body":{"index.html":{}}}],["i18n",{"_index":745,"title":{},"body":{"index.html":{}}}],["id",{"_index":259,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["id's",{"_index":323,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["identifier",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":56,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["images",{"_index":379,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["implement",{"_index":430,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["implements",{"_index":85,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{}}}],["imports",{"_index":495,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["include",{"_index":43,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["included",{"_index":700,"title":{},"body":{"index.html":{}}}],["includes",{"_index":647,"title":{},"body":{"index.html":{}}}],["including",{"_index":296,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/Command.html":{},"injectables/PlayerClientService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":437,"title":{},"body":{"interfaces/EventProperties.html":{}}}],["indicate",{"_index":343,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["indicates",{"_index":372,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["individual",{"_index":805,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{}}}],["information",{"_index":612,"title":{},"body":{"index.html":{}}}],["init(data",{"_index":173,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["init.service",{"_index":487,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["init.service.ts",{"_index":557,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["initializeapp",{"_index":498,"title":{},"body":{"modules/PlayerClientModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["initializeapp(appinitservice",{"_index":507,"title":{},"body":{"modules/PlayerClientModule.html":{},"miscellaneous/functions.html":{}}}],["initialized",{"_index":738,"title":{},"body":{"index.html":{}}}],["initializing",{"_index":176,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["initiate",{"_index":190,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["initiating",{"_index":307,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["inject",{"_index":676,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":17,"title":{"injectables/PlayerClientService.html":{}},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":510,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["instanceof",{"_index":365,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["interactive",{"_index":402,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{}},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"overview.html":{}}}],["interfacting",{"_index":669,"title":{},"body":{"index.html":{}}}],["islocal",{"_index":558,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isn't",{"_index":384,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["iso8601",{"_index":238,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["ispreviewmode",{"_index":364,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["it's",{"_index":345,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["item",{"_index":349,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["itself",{"_index":743,"title":{},"body":{"index.html":{}}}],["jquery",{"_index":739,"title":{},"body":{"index.html":{}}}],["json.parse(await",{"_index":341,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["json.parse(e.substring(13",{"_index":149,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["json.stringify(properties",{"_index":306,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["key",{"_index":80,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["key(s",{"_index":275,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["keys",{"_index":285,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["lang",{"_index":753,"title":{},"body":{"index.html":{}}}],["language",{"_index":265,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["legend",{"_index":443,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"overview.html":{}}}],["libaries",{"_index":631,"title":{},"body":{"index.html":{}}}],["libary",{"_index":740,"title":{},"body":{"index.html":{}}}],["library",{"_index":55,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["library/tree/master/projects/test",{"_index":815,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":671,"title":{},"body":{"index.html":{}}}],["link",{"_index":222,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["list",{"_index":766,"title":{},"body":{"index.html":{}}}],["literal",{"_index":825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["load",{"_index":373,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["loaded",{"_index":97,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["loading",{"_index":401,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["locale",{"_index":668,"title":{},"body":{"index.html":{}}}],["locale_id",{"_index":484,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["locales",{"_index":741,"title":{},"body":{"index.html":{}}}],["localhost/.test(document.location.host",{"_index":826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localization",{"_index":742,"title":{},"body":{"index.html":{}}}],["localized",{"_index":737,"title":{},"body":{"index.html":{}}}],["log",{"_index":287,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["made",{"_index":398,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["majority",{"_index":661,"title":{},"body":{"index.html":{}}}],["make",{"_index":769,"title":{},"body":{"index.html":{}}}],["making",{"_index":595,"title":{},"body":{"index.html":{}}}],["mandatory",{"_index":771,"title":{},"body":{"index.html":{}}}],["map",{"_index":26,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["map((e",{"_index":133,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["matching",{"_index":436,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":387,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["medium",{"_index":797,"title":{},"body":{"index.html":{}}}],["message').pipe",{"_index":141,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["messageevent",{"_index":143,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["messageevent.data",{"_index":147,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["messageevent.data.startswith('reveldigital",{"_index":148,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["messageevent.source",{"_index":144,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["messages",{"_index":750,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":549,"title":{},"body":{"pipes/SafeStylePipe.html":{}}}],["method",{"_index":182,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["methods",{"_index":107,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"index.html":{}}}],["metrics",{"_index":295,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["miscellaneous",{"_index":588,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mock",{"_index":395,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["mode",{"_index":355,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["modified",{"_index":804,"title":{},"body":{"index.html":{}}}],["module",{"_index":439,"title":{"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{}},"body":{"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"overview.html":{}}}],["modules",{"_index":441,"title":{"modules.html":{}},"body":{"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":736,"title":{},"body":{"index.html":{}}}],["more",{"_index":224,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["multi",{"_index":500,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["multiple",{"_index":794,"title":{},"body":{"index.html":{}}}],["myboolpref",{"_index":785,"title":{},"body":{"index.html":{}}}],["myenumpref",{"_index":787,"title":{},"body":{"index.html":{}}}],["mylistpref",{"_index":798,"title":{},"body":{"index.html":{}}}],["mystring",{"_index":229,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["mystringpref",{"_index":783,"title":{},"body":{"index.html":{}}}],["mystylepref",{"_index":789,"title":{},"body":{"index.html":{}}}],["name",{"_index":12,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["need",{"_index":408,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["nested",{"_index":780,"title":{},"body":{"index.html":{}}}],["network",{"_index":389,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["new",{"_index":94,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"coverage.html":{},"index.html":{}}}],["neweventsession",{"_index":329,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["neweventsession(id",{"_index":75,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["next",{"_index":348,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["ng",{"_index":626,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":458,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"pipes/SafeStylePipe.html":{}}}],["ngondestroy",{"_index":167,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["ngsafestylepipemodule",{"_index":440,"title":{"modules/NgSafeStylePipeModule.html":{}},"body":{"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"pipes/SafeStylePipe.html":{},"modules.html":{},"overview.html":{}}}],["ngzone",{"_index":18,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["none_of",{"_index":779,"title":{},"body":{"index.html":{}}}],["noop",{"_index":429,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["noopclient",{"_index":366,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["normal",{"_index":360,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["note",{"_index":276,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["nothing",{"_index":431,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["npm",{"_index":640,"title":{},"body":{"index.html":{}}}],["null",{"_index":88,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["number",{"_index":200,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["numerical",{"_index":261,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["object",{"_index":118,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["obtaining",{"_index":667,"title":{},"body":{"index.html":{}}}],["offline",{"_index":729,"title":{},"body":{"index.html":{}}}],["offset",{"_index":262,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["oncommand",{"_index":93,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["oncommandevt",{"_index":131,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["oncommandsub",{"_index":130,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["ondestroy",{"_index":19,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["one",{"_index":386,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["onpostmessageevt",{"_index":139,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["onpostmessagesub",{"_index":138,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["onready",{"_index":100,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["onstart",{"_index":103,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["onstartevt",{"_index":122,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["onstartsub",{"_index":121,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["onstop",{"_index":105,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["onstopevt",{"_index":127,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["onstopsub",{"_index":126,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["option",{"_index":649,"title":{},"body":{"index.html":{}}}],["optional",{"_index":244,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["options",{"_index":705,"title":{},"body":{"index.html":{}}}],["order",{"_index":677,"title":{},"body":{"index.html":{}}}],["organization",{"_index":715,"title":{},"body":{"index.html":{}}}],["origin",{"_index":618,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":359,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["out",{"_index":453,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":749,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":570,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pages",{"_index":651,"title":{},"body":{"index.html":{}}}],["pagessample",{"_index":660,"title":{},"body":{"index.html":{}}}],["param",{"_index":197,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["parameters",{"_index":516,"title":{},"body":{"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"miscellaneous/functions.html":{}}}],["party",{"_index":383,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["path",{"_index":338,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["pipe",{"_index":456,"title":{"pipes/SafeStylePipe.html":{}},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["pipes",{"_index":548,"title":{},"body":{"pipes/SafeStylePipe.html":{}}}],["pipetransform",{"_index":457,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{}}}],["place",{"_index":47,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["player",{"_index":91,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["player/gadget",{"_index":594,"title":{},"body":{"index.html":{}}}],["playerclientmodule",{"_index":479,"title":{"modules/PlayerClientModule.html":{}},"body":{"modules/PlayerClientModule.html":{},"modules.html":{},"overview.html":{}}}],["playerclientservice",{"_index":84,"title":{"injectables/PlayerClientService.html":{}},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"coverage.html":{},"index.html":{}}}],["playerclientservice.init",{"_index":508,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["playlist",{"_index":350,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["point",{"_index":416,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["pref",{"_index":472,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{}}}],["prefence",{"_index":770,"title":{},"body":{"index.html":{}}}],["preference",{"_index":759,"title":{},"body":{"index.html":{}}}],["preferences",{"_index":219,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["prefs",{"_index":227,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["prefs.getstring(&#39;mystringpref&#39",{"_index":530,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["prefs.getstring('mystringpref",{"_index":230,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{}}}],["present",{"_index":419,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["presented",{"_index":697,"title":{},"body":{"index.html":{}}}],["preview",{"_index":354,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["primary",{"_index":702,"title":{},"body":{"index.html":{}}}],["private",{"_index":86,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["proceed",{"_index":347,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["proceeded",{"_index":311,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["project",{"_index":701,"title":{},"body":{"index.html":{}}}],["projects/.../app",{"_index":822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../player",{"_index":590,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/.../test.ts",{"_index":821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/reveldigital/player",{"_index":6,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":65,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["promise.resolve",{"_index":434,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["promise.resolve(new",{"_index":396,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["promise.resolve(null",{"_index":433,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["promise.resolve(window.client",{"_index":369,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{},"properties.html":{}}}],["property",{"_index":673,"title":{},"body":{"index.html":{}}}],["propreties",{"_index":758,"title":{},"body":{"index.html":{}}}],["provide",{"_index":422,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["provided",{"_index":646,"title":{},"body":{"index.html":{}}}],["providedin",{"_index":81,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["providers",{"_index":446,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"overview.html":{}}}],["provides",{"_index":46,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["providing",{"_index":703,"title":{},"body":{"index.html":{}}}],["public",{"_index":92,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["publicly",{"_index":656,"title":{},"body":{"index.html":{}}}],["publishing",{"_index":650,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":723,"title":{},"body":{"index.html":{}}}],["quickstart",{"_index":601,"title":{},"body":{"index.html":{}}}],["quot;a&quot",{"_index":539,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["quot;b&quot",{"_index":540,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["random",{"_index":333,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["randomly",{"_index":324,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["ready",{"_index":98,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["ready/start/stop",{"_index":672,"title":{},"body":{"index.html":{}}}],["remote",{"_index":274,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["repo",{"_index":812,"title":{},"body":{"index.html":{}}}],["repository",{"_index":606,"title":{},"body":{"index.html":{}}}],["require",{"_index":567,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":768,"title":{},"body":{"index.html":{}}}],["requirements",{"_index":725,"title":{},"body":{"index.html":{}}}],["requires",{"_index":774,"title":{},"body":{"index.html":{}}}],["reset",{"_index":326,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"overview.html":{}}}],["resolve",{"_index":413,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["resolve(window.client",{"_index":421,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["resources",{"_index":376,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["respective",{"_index":249,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["responsible",{"_index":693,"title":{},"body":{"index.html":{}}}],["results",{"_index":435,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":134,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{}}}],["returns",{"_index":231,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["revel",{"_index":177,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["reveldigital",{"_index":117,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["reveldigital.command').pipe",{"_index":132,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["reveldigital.start').pipe",{"_index":124,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["reveldigital.stop').pipe",{"_index":128,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["reveldigital/gadget",{"_index":31,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["reveldigital/player",{"_index":634,"title":{},"body":{"index.html":{}}}],["root",{"_index":82,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["routermodule",{"_index":490,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["routermodule.forroot",{"_index":496,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["run",{"_index":624,"title":{},"body":{"index.html":{}}}],["running",{"_index":188,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["runtime",{"_index":757,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":25,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":29,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["safe",{"_index":462,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"pipes/SafeStylePipe.html":{}}}],["safely",{"_index":469,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{}}}],["safestyle",{"_index":473,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{},"index.html":{}}}],["safestylepipe",{"_index":451,"title":{"pipes/SafeStylePipe.html":{}},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{},"coverage.html":{},"overview.html":{}}}],["same",{"_index":280,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["sample",{"_index":471,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{},"index.html":{}}}],["sanitized",{"_index":475,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{}}}],["schematic",{"_index":632,"title":{},"body":{"index.html":{}}}],["schematicstep",{"_index":636,"title":{},"body":{"index.html":{}}}],["scope",{"_index":420,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["scoped",{"_index":116,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["script",{"_index":194,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["scripting",{"_index":185,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["scripts",{"_index":378,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["scriptstep",{"_index":642,"title":{},"body":{"index.html":{}}}],["see",{"_index":221,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["self",{"_index":151,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["self.oncommand$.next",{"_index":156,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["self.onstart$.next(null",{"_index":157,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["self.onstop$.next(null",{"_index":158,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["send",{"_index":271,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["sendcommand",{"_index":512,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["sendcommand(name",{"_index":71,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["sender",{"_index":282,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["sending",{"_index":670,"title":{},"body":{"index.html":{}}}],["sendremotecommand",{"_index":513,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["sendremotecommand(devicekeys",{"_index":72,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["sent",{"_index":90,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["service",{"_index":664,"title":{},"body":{"index.html":{}}}],["services",{"_index":645,"title":{},"body":{"index.html":{}}}],["session",{"_index":318,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["sets",{"_index":619,"title":{},"body":{"index.html":{}}}],["share",{"_index":27,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["shown",{"_index":761,"title":{},"body":{"index.html":{}}}],["signage",{"_index":658,"title":{},"body":{"index.html":{}}}],["signals",{"_index":95,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["simplies",{"_index":593,"title":{},"body":{"index.html":{}}}],["simplified",{"_index":648,"title":{},"body":{"index.html":{}}}],["simply",{"_index":653,"title":{},"body":{"index.html":{}}}],["size:18px",{"_index":793,"title":{},"body":{"index.html":{}}}],["skip",{"_index":609,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{}}}],["space",{"_index":41,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["spec\\.ts",{"_index":824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":99,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["started",{"_index":102,"title":{"index.html":{}},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["state",{"_index":300,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["statements",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":172,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["statistics",{"_index":298,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["status",{"_index":371,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["step",{"_index":604,"title":{},"body":{"index.html":{}}}],["stopped",{"_index":104,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["string",{"_index":13,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["style",{"_index":463,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{},"index.html":{}}}],["style.pipe",{"_index":494,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["style.pipe.ts",{"_index":455,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{},"coverage.html":{}}}],["style.pipe.ts:17",{"_index":551,"title":{},"body":{"pipes/SafeStylePipe.html":{}}}],["styles",{"_index":464,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{}}}],["sub",{"_index":375,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["subject",{"_index":23,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["subscription",{"_index":24,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["subsequent",{"_index":327,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["such",{"_index":377,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["supplied",{"_index":245,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["support",{"_index":698,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":782,"title":{},"body":{"index.html":{}}}],["supporting",{"_index":665,"title":{},"body":{"index.html":{}}}],["svg",{"_index":816,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":203,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["systemjs",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":28,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["tap(this.oncommand",{"_index":137,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["tap(this.onstart",{"_index":125,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["tap(this.onstop",{"_index":129,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["template",{"_index":189,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["test",{"_index":784,"title":{},"body":{"index.html":{}}}],["there's",{"_index":417,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["third",{"_index":411,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.client.oncommand$.subscribe((cmd",{"_index":684,"title":{},"body":{"index.html":{}}}],["this.client.onready$.subscribe((val",{"_index":682,"title":{},"body":{"index.html":{}}}],["this.client.onstart$.subscribe",{"_index":688,"title":{},"body":{"index.html":{}}}],["this.client.onstop$.subscribe",{"_index":690,"title":{},"body":{"index.html":{}}}],["this.clientpromise",{"_index":165,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.getclient",{"_index":254,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.getclient().then((client",{"_index":202,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.oncommandevt$.subscribe",{"_index":164,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.oncommandsub",{"_index":163,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.oncommandsub?.unsubscribe",{"_index":170,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.onready$.next(false",{"_index":171,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.onready$.next(true",{"_index":166,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.onstartevt$.subscribe",{"_index":160,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.onstartsub",{"_index":159,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.onstartsub?.unsubscribe",{"_index":168,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.onstopevt$.subscribe",{"_index":162,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.onstopsub",{"_index":161,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.onstopsub?.unsubscribe",{"_index":169,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["this.prefs",{"_index":679,"title":{},"body":{"index.html":{}}}],["this.prefs.getarray('mylistpref');angular",{"_index":811,"title":{},"body":{"index.html":{}}}],["this.prefs.getbool('myboolpref",{"_index":808,"title":{},"body":{"index.html":{}}}],["this.prefs.getfloat('myfloatpref",{"_index":809,"title":{},"body":{"index.html":{}}}],["this.prefs.getint('myintpref",{"_index":810,"title":{},"body":{"index.html":{}}}],["this.prefs.getstring('mystringpref",{"_index":807,"title":{},"body":{"index.html":{}}}],["this.prefs.getstring('mystylepref",{"_index":681,"title":{},"body":{"index.html":{}}}],["this.sanitized.bypasssecuritytruststyle(value",{"_index":478,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{}}}],["this.style",{"_index":680,"title":{},"body":{"index.html":{}}}],["though",{"_index":425,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["time",{"_index":237,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["timed",{"_index":308,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["timeevent",{"_index":514,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["timeevent(eventname",{"_index":74,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["timezone",{"_index":241,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["timezones",{"_index":250,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["title",{"_index":710,"title":{},"body":{"index.html":{}}}],["title_url",{"_index":713,"title":{},"body":{"index.html":{}}}],["together",{"_index":321,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["track",{"_index":313,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["track(eventname",{"_index":73,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["tracker",{"_index":44,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["tracking",{"_index":293,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["transform",{"_index":550,"title":{},"body":{"pipes/SafeStylePipe.html":{}}}],["transform(value",{"_index":476,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{}}}],["translate",{"_index":246,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["transparent",{"_index":720,"title":{},"body":{"index.html":{}}}],["true",{"_index":362,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":501,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["tslib",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":106,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/Command.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":146,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["types",{"_index":32,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["typescript",{"_index":33,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["undefined",{"_index":255,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["under",{"_index":813,"title":{},"body":{"index.html":{}}}],["unique",{"_index":268,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["unknown",{"_index":477,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{}}}],["until",{"_index":331,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["upon",{"_index":193,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["url",{"_index":615,"title":{},"body":{"index.html":{}}}],["urlstep",{"_index":622,"title":{},"body":{"index.html":{}}}],["usage",{"_index":297,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["use",{"_index":289,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["used",{"_index":292,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/NgSafeStylePipeModule.html":{},"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{}}}],["usefactory",{"_index":497,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["useful",{"_index":309,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["user",{"_index":218,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["usevalue",{"_index":505,"title":{},"body":{"modules/PlayerClientModule.html":{}}}],["using",{"_index":110,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["utilize",{"_index":330,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["utilized",{"_index":337,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["utilizing",{"_index":470,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"pipes/SafeStylePipe.html":{},"index.html":{}}}],["ux",{"_index":712,"title":{},"body":{"index.html":{}}}],["v",{"_index":620,"title":{},"body":{"index.html":{}}}],["value",{"_index":543,"title":{},"body":{"injectables/PlayerClientService.html":{},"pipes/SafeStylePipe.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":776,"title":{},"body":{"index.html":{}}}],["var",{"_index":58,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"modules/PlayerClientModule.html":{},"injectables/PlayerClientService.html":{}}}],["variable",{"_index":199,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"coverage.html":{}}}],["variables",{"_index":820,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":294,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["verifies",{"_index":621,"title":{},"body":{"index.html":{}}}],["version",{"_index":818,"title":{},"body":{"properties.html":{}}}],["visibile",{"_index":657,"title":{},"body":{"index.html":{}}}],["visibility",{"_index":773,"title":{},"body":{"index.html":{}}}],["visualization",{"_index":346,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["void",{"_index":62,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["wait",{"_index":410,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["way",{"_index":319,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["we're",{"_index":36,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["webfont",{"_index":732,"title":{},"body":{"index.html":{}}}],["webfontloader",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["webfonts",{"_index":734,"title":{},"body":{"index.html":{}}}],["what's",{"_index":53,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["window",{"_index":40,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["window.addeventlistener",{"_index":414,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["window.client",{"_index":368,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["window.document.readystate",{"_index":381,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["window.parent",{"_index":145,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["window['gadgets']['prefs",{"_index":234,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["within",{"_index":279,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{},"index.html":{}}}],["worker",{"_index":730,"title":{},"body":{"index.html":{}}}],["working",{"_index":623,"title":{},"body":{"index.html":{}}}],["xml",{"_index":639,"title":{},"body":{"index.html":{}}}],["yes",{"_index":524,"title":{},"body":{"injectables/PlayerClientService.html":{}}}],["zone.js",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["zone.run",{"_index":155,"title":{},"body":{"interfaces/Command.html":{},"interfaces/EventProperties.html":{},"injectables/PlayerClientService.html":{}}}],["zoom",{"_index":452,"title":{},"body":{"modules/NgSafeStylePipeModule.html":{},"modules/PlayerClientModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Command.html":{"url":"interfaces/Command.html","title":"interface - Command","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Command\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/reveldigital/player-client/src/lib/player-client.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            arg\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        arg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        arg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, NgZone, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, fromEvent, Subject, Subscription } from 'rxjs';\nimport { map, share, tap } from 'rxjs/operators';\nimport { gadgets } from '@reveldigital/gadget-types';\n\n\n// So that TypeScript doesn't complain, we're going to augment the GLOBAL / WINDOW \n// name-space definition to include the Tracker API. This also provides us with a place\n// to actually DOCUMENT the API so that our developers aren't guessing about what's\n// available on the library.\n\n/** @ignore */\ndeclare global {\n  var Client: Client;\n}\n\n/** @ignore */\nexport interface Client {\n\n  callback(...args: any[]): void;\n\n  getDeviceTime(date?: Date): Promise;\n\n  getDeviceTimeZoneName(): Promise;\n\n  getDeviceTimeZoneID(): Promise;\n\n  getDeviceTimeZoneOffset(): Promise;\n\n  getLanguageCode(): Promise;\n\n  getDeviceKey(): Promise;\n\n  sendCommand(name: string, arg: string): void;\n\n  sendRemoteCommand(deviceKeys: string[], name: string, arg: string): void;\n\n  track(eventName: string, properties?: string): void;\n\n  timeEvent(eventName: string): void;\n\n  newEventSession(id?: string): void;\n\n  getRevelRoot(): Promise;\n\n  getCommandMap(): Promise;\n\n  finish(): void;\n}\n\nexport interface EventProperties {\n  [key: string]: any;\n}\n\nexport interface Command {\n  name: string;\n  arg: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayerClientService implements OnDestroy {\n\n  /** @ignore */\n  private clientPromise: Promise | null;\n\n  /**\n   * Commands sent to this player.\n   */\n  public onCommand$ = new Subject();\n  /**\n   * Signals the gadget has been loaded and is ready to start.\n   */\n  public onReady$ = new BehaviorSubject(false);\n  /**\n   * Signals the gadget has been started by the player.\n   */\n  public onStart$ = new Subject();\n  /**\n   * Signals the gadgets has been stopped by the player.\n   */\n  public onStop$ = new Subject();\n\n  //\n  // Two methods available for calling into the library:\n  //\n  // 1) Using dispatchEvent() with the following custom events\n  // 2) Using the window scoped RevelDigital object as defined in the constructor\n  //\n  /** @ignore */\n  private onStartSub: Subscription;\n  /** @ignore */\n  private onStartEvt$ = fromEvent(document, 'RevelDigital.Start').pipe(\n    share(),\n    tap(this.onStart$)\n  );\n  /** @ignore */\n  private onStopSub: Subscription;\n  /** @ignore */\n  private onStopEvt$ = fromEvent(document, 'RevelDigital.Stop').pipe(\n    share(),\n    tap(this.onStop$)\n  );\n  /** @ignore */\n  private onCommandSub: Subscription;\n  /** @ignore */\n  private onCommandEvt$ = fromEvent(document, 'RevelDigital.Command').pipe(\n    map((e: any) => { return { name: e.detail.name, arg: e.detail.arg } as Command }),\n    share(),\n    tap(this.onCommand$)\n  );\n\n  // private onPostMessageSub: Subscription;\n  // private onPostMessageEvt$ = fromEvent(window, 'message').pipe(\n  //   filter((messageEvent: MessageEvent) =>\n  //     messageEvent.source !== window.parent &&\n  //     typeof messageEvent.data === 'string' &&\n  //     messageEvent.data.startsWith('reveldigital:')),\n  //   map((e: any) => { return JSON.parse(e.substring(13)) as Command }),\n  //   share(),\n  //   tap(this.onCommand$)\n  // );\n\n  /** @ignore */\n  constructor(zone: NgZone) {\n\n    let self = this;\n    (window as any).RevelDigital = {\n      Controller: {\n        onCommand: function (name: string, arg: string) {\n          zone.run(() => {\n            self.onCommand$.next({ name: name, arg: arg });\n          });\n        },\n        onStart: function () {\n          zone.run(() => {\n            self.onStart$.next(null);\n          });\n        },\n        onStop: function () {\n          zone.run(() => {\n            self.onStop$.next(null);\n          });\n        }\n      }\n    }\n\n    this.onStartSub = this.onStartEvt$.subscribe(() => { });\n    this.onStopSub = this.onStopEvt$.subscribe(() => { });\n    this.onCommandSub = this.onCommandEvt$.subscribe(() => { });\n\n    this.clientPromise = null;\n\n    this.onReady$.next(true);\n  }\n\n  /** @ignore */\n  ngOnDestroy(): void {\n\n    this.onStartSub?.unsubscribe();\n    this.onStopSub?.unsubscribe();\n    this.onCommandSub?.unsubscribe();\n\n    this.onReady$.next(false);\n  }\n\n  /** @ignore */\n  public static init(data: any) {\n\n    console.log(\n      '%c⚙️ Initializing Revel Digital client library',\n      'background-color:blue; color:yellow;'\n    );\n  }\n\n  /**\n   * This method allows the gadget to communicate with player scripting.\n   * If the appropriate scripting is in place in the currently running template, calling this method\n   * will initiate a callback which can be acted upon in player script.\n   * \n   * @example\n   * client.callback('test', 'this');\n   * \n   * @param args variable number of arguments\n   */\n  public callback(...args: any[]): void {\n\n    this.getClient().then((client) => {\n\n      switch (args.length) {\n        case 0:\n          client.callback();\n          break;\n        case 1:\n          client.callback(args[0]);\n          break;\n        case 2:\n          client.callback(args[1]);\n          break;\n        case 3:\n          client.callback(args[2]);\n          break;\n        case 4:\n          client.callback(args[3]);\n          break;\n        case 5:\n          client.callback(args[4]);\n          break;\n      }\n    })\n  }\n\n  /**\n   * Accessor method for the user preferences interface exposed by the Gadgets API.\n   * \n   * See {@link https://developers.google.com/gadgets/docs/basic} for more details on the Gadgets API.\n   * \n   * @example\n   * constructor(public client: PlayerClientService) {\n   *            let prefs = client.getPrefs();\n   *            let myString = prefs.getString('myStringPref');\n   * }\n   * @returns {gadgets.Prefs} Gadget API Prefs object\n   */\n  public getPrefs(): gadgets.Prefs {\n\n    return new window['gadgets']['Prefs']();\n  }\n\n  /**\n   * Returns the current device time in ISO8601 format.\n   * Current device time is determined by the device timezone assigned to the device in the CMS.\n   * \n   * @param date Optional. If supplied will translate the supplied date/time to device time based on respective timezones.\n   * @returns Date/time in ISO8601 format\n   */\n  public async getDeviceTime(date?: Date): Promise {\n\n    const client = await this.getClient();\n\n    if (date !== undefined) {\n      return client.getDeviceTime(date);\n    }\n    return client.getDeviceTime();\n  }\n\n  /**\n   * Returns the timezone name currently assigned to the device.\n   * \n   * @returns Timezone Name\n   */\n  public async getDeviceTimeZoneName(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getDeviceTimeZoneName();\n  }\n\n  /**\n   * Returns the timezone ID currently assigned to the device.\n   * \n   * @returns Timezone ID\n   */\n  public async getDeviceTimeZoneID(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getDeviceTimeZoneID();\n  }\n\n  /**\n   * Returns the numerical offset from GMT of the timezone currently assigned to the device.\n   * \n   * @returns Timezone offset\n   */\n  public async getDeviceTimeZoneOffset(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getDeviceTimeZoneOffset();\n  }\n\n  /**\n   * Returns the language code of the language currently assigned to the device.\n   * \n   * @returns Language code\n   */\n  public async getLanguageCode(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getLanguageCode();\n  }\n\n  /**\n   * Returns the unique Revel Digital device key associated with the device.\n   * \n   * @returns Device key\n   */\n  public async getDeviceKey(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getDeviceKey();\n  }\n\n  /**\n   * Send a command to the player device.\n   * \n   * @param name Command name\n   * @param arg Command argument\n   */\n  public sendCommand(name: string, arg: string): void {\n\n    this.getClient().then((client) => {\n      client.sendCommand(name, arg);\n    })\n  }\n\n  /**\n   * Send a command to any remote player with the supplied device key(s).\n   * Note: Remote commands can only be delivered to devices within the same account as the sender device.\n   * \n   * @param deviceKeys Array of remote device keys\n   * @param name Command name\n   * @param arg Command arg\n   */\n  public sendRemoteCommand(deviceKeys: string[], name: string, arg: string): void {\n\n    this.getClient().then((client) => {\n      client.sendRemoteCommand(deviceKeys, name, arg);\n    });\n  }\n\n  /**\n   * Log an event for use with AdHawk analytics.\n   * Events are used for tracking various metrics including usage statistics, player condition, state changes, etc.\n   * \n   * @param eventName Unique name for this event\n   * @param properties A map of user defined properties to associate with this event\n   */\n  public track(eventName: string, properties?: EventProperties): void {\n\n    this.getClient().then((client) => {\n      client.track(eventName, JSON.stringify(properties));\n    })\n  }\n\n  /**\n   * Method for initiating a timed event.\n   * Timed events are useful for tracking the duration of an event and must be proceeded with a call to track().\n   * \n   * @example\n   * client.timeEvent('testEvent');\n   * client.track(\"test\", { \"a\": \"b\" });\n   * @param eventName Unique name for this event\n   */\n  public timeEvent(eventName: string): void {\n\n    this.getClient().then((client) => {\n      client.timeEvent(eventName);\n    })\n  }\n\n  /**\n   * A session is a way of grouping events together. Each event has an associated session ID.\n   * Session ID's are randomly generated and reset by subsequent calls to newEventSession().\n   * \n   * Each call to track() will utilize the same session ID, until another call to newEventSession().\n   * @param id Optional. User supplied session ID. If not supplied a random session ID will be generated.\n   */\n  public newEventSession(id?: string): void {\n\n    this.getClient().then((client) => {\n      if (id !== undefined) {\n        client.newEventSession();\n      } else {\n        client.newEventSession(id);\n      }\n    })\n  }\n\n  /**\n   * Returns the root folder utilized by this player device.\n   * \n   * @returns Path to the root folder\n   */\n  public async getRevelRoot(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getRevelRoot();\n  }\n\n  /**\n   * Returns a map of commands currently active for this device.\n   * \n   * @returns Map of commands currently active for this device.\n   */\n  public async getCommandMap(): Promise {\n\n    const client = await this.getClient();\n\n    return JSON.parse(await client.getCommandMap());\n  }\n\n  /**\n   * Indicate to the player that this gadget has finished it's visualization.\n   * This allows the player to proceed with the next item in a playlist if applicable.\n   */\n  public finish(): void {\n\n    this.getClient().then((client) => {\n\n      client.finish();\n    })\n  }\n\n  /**\n   * Check is the gadget is running in preview mode. Preview mode is enabled when the gadget is\n   * being edited in the CMS, or otherwise not running in a normal player environment.\n   * \n   * @returns True if the gadget is running in preview mode, false otherwise.\n   */\n  public async isPreviewMode(): Promise {\n\n    const client = await this.getClient();\n\n    return client instanceof NoopClient;\n  }\n\n    \n  // ---\n  // PRIVATE METHODS.\n  // ---\n  /** @ignore */\n  private getClient(): Promise {\n\n    if (this.clientPromise) {\n\n      return (this.clientPromise);\n    }\n\n    if (window.Client) {\n\n      return (this.clientPromise = Promise.resolve(window.Client));\n    }\n\n    // A \"complete\" status indicates that the \"load\" event has been fired on the\n    // window; and, that all sub-resources such as Scripts, Images, and Frames have\n    // been loaded.\n    if (window.document.readyState === \"complete\") {\n\n      // If this event has fired AND the 3rd-party script isn't available (see IF-\n      // condition BEFORE this one), it means that the 3rd-party script either\n      // failed on the network or was BLOCKED by an ad-blocker. As such, we have to\n      // fall-back to using a mock API.\n      return (this.clientPromise = Promise.resolve(new NoopClient()));\n    }\n\n    // ASSERT: If we made it this far, the document has not completed loading (but it\n    // may be in an \"interactive\" state which is when I believe that the Angular app\n    // gets bootstrapped). As such, we need bind to the LOAD event to wait for our\n    // third-party scripts to load (or fail to load, or be blocked).\n    this.clientPromise = new Promise(\n      (resolve) => {\n\n        window.addEventListener(\n          \"load\",\n          function handleWindowLoad() {\n\n            // At this point, the 3rd-party library is either available or\n            // it's not - there's no further loading to do. If it's not\n            // present on the global scope, we're going to fall-back to using\n            // a mock API.\n            resolve(window.Client || new NoopClient());\n          }\n        );\n\n      }\n    );\n\n    return (this.clientPromise);\n  }\n\n}\n\n\n\n// ----------------------------------------------------------------------------------- //\n// ----------------------------------------------------------------------------------- //\n\n// I provide a mock API for the 3rd-party script. This just allows the consuming code to\n// act as though the library is available even if it failed to load (example, it was\n// blocked by an ad-blocker).\n\n/** @ignore */\nclass NoopClient implements Client {\n\n  constructor() {\n\n    console.log(\n      '%cClient API not available, falling back to mock API',\n      'background-color:blue; color:yellow;'\n    );\n  }\n\n  public callback(...args: any[]): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public getDeviceTime(date?: Date): Promise {\n\n    return Promise.resolve(new Date().toISOString());\n  }\n\n  public async getDeviceTimeZoneName(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getDeviceTimeZoneID(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getDeviceTimeZoneOffset(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getLanguageCode(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getDeviceKey(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public sendCommand(name: string, arg: string): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public sendRemoteCommand(deviceKeys: string[], name: string, arg: string) {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public track(eventName: string, properties?: string): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public timeEvent(eventName: string): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public newEventSession(id?: string): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public async getRevelRoot(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getCommandMap(): Promise {\n\n    return Promise.resolve('{}');\n  }\n\n  public finish(): void {\n\n    // NOOP implement, nothing to do....\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventProperties.html":{"url":"interfaces/EventProperties.html","title":"interface - EventProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/reveldigital/player-client/src/lib/player-client.service.ts\n        \n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:51\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { Injectable, NgZone, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, fromEvent, Subject, Subscription } from 'rxjs';\nimport { map, share, tap } from 'rxjs/operators';\nimport { gadgets } from '@reveldigital/gadget-types';\n\n\n// So that TypeScript doesn't complain, we're going to augment the GLOBAL / WINDOW \n// name-space definition to include the Tracker API. This also provides us with a place\n// to actually DOCUMENT the API so that our developers aren't guessing about what's\n// available on the library.\n\n/** @ignore */\ndeclare global {\n  var Client: Client;\n}\n\n/** @ignore */\nexport interface Client {\n\n  callback(...args: any[]): void;\n\n  getDeviceTime(date?: Date): Promise;\n\n  getDeviceTimeZoneName(): Promise;\n\n  getDeviceTimeZoneID(): Promise;\n\n  getDeviceTimeZoneOffset(): Promise;\n\n  getLanguageCode(): Promise;\n\n  getDeviceKey(): Promise;\n\n  sendCommand(name: string, arg: string): void;\n\n  sendRemoteCommand(deviceKeys: string[], name: string, arg: string): void;\n\n  track(eventName: string, properties?: string): void;\n\n  timeEvent(eventName: string): void;\n\n  newEventSession(id?: string): void;\n\n  getRevelRoot(): Promise;\n\n  getCommandMap(): Promise;\n\n  finish(): void;\n}\n\nexport interface EventProperties {\n  [key: string]: any;\n}\n\nexport interface Command {\n  name: string;\n  arg: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayerClientService implements OnDestroy {\n\n  /** @ignore */\n  private clientPromise: Promise | null;\n\n  /**\n   * Commands sent to this player.\n   */\n  public onCommand$ = new Subject();\n  /**\n   * Signals the gadget has been loaded and is ready to start.\n   */\n  public onReady$ = new BehaviorSubject(false);\n  /**\n   * Signals the gadget has been started by the player.\n   */\n  public onStart$ = new Subject();\n  /**\n   * Signals the gadgets has been stopped by the player.\n   */\n  public onStop$ = new Subject();\n\n  //\n  // Two methods available for calling into the library:\n  //\n  // 1) Using dispatchEvent() with the following custom events\n  // 2) Using the window scoped RevelDigital object as defined in the constructor\n  //\n  /** @ignore */\n  private onStartSub: Subscription;\n  /** @ignore */\n  private onStartEvt$ = fromEvent(document, 'RevelDigital.Start').pipe(\n    share(),\n    tap(this.onStart$)\n  );\n  /** @ignore */\n  private onStopSub: Subscription;\n  /** @ignore */\n  private onStopEvt$ = fromEvent(document, 'RevelDigital.Stop').pipe(\n    share(),\n    tap(this.onStop$)\n  );\n  /** @ignore */\n  private onCommandSub: Subscription;\n  /** @ignore */\n  private onCommandEvt$ = fromEvent(document, 'RevelDigital.Command').pipe(\n    map((e: any) => { return { name: e.detail.name, arg: e.detail.arg } as Command }),\n    share(),\n    tap(this.onCommand$)\n  );\n\n  // private onPostMessageSub: Subscription;\n  // private onPostMessageEvt$ = fromEvent(window, 'message').pipe(\n  //   filter((messageEvent: MessageEvent) =>\n  //     messageEvent.source !== window.parent &&\n  //     typeof messageEvent.data === 'string' &&\n  //     messageEvent.data.startsWith('reveldigital:')),\n  //   map((e: any) => { return JSON.parse(e.substring(13)) as Command }),\n  //   share(),\n  //   tap(this.onCommand$)\n  // );\n\n  /** @ignore */\n  constructor(zone: NgZone) {\n\n    let self = this;\n    (window as any).RevelDigital = {\n      Controller: {\n        onCommand: function (name: string, arg: string) {\n          zone.run(() => {\n            self.onCommand$.next({ name: name, arg: arg });\n          });\n        },\n        onStart: function () {\n          zone.run(() => {\n            self.onStart$.next(null);\n          });\n        },\n        onStop: function () {\n          zone.run(() => {\n            self.onStop$.next(null);\n          });\n        }\n      }\n    }\n\n    this.onStartSub = this.onStartEvt$.subscribe(() => { });\n    this.onStopSub = this.onStopEvt$.subscribe(() => { });\n    this.onCommandSub = this.onCommandEvt$.subscribe(() => { });\n\n    this.clientPromise = null;\n\n    this.onReady$.next(true);\n  }\n\n  /** @ignore */\n  ngOnDestroy(): void {\n\n    this.onStartSub?.unsubscribe();\n    this.onStopSub?.unsubscribe();\n    this.onCommandSub?.unsubscribe();\n\n    this.onReady$.next(false);\n  }\n\n  /** @ignore */\n  public static init(data: any) {\n\n    console.log(\n      '%c⚙️ Initializing Revel Digital client library',\n      'background-color:blue; color:yellow;'\n    );\n  }\n\n  /**\n   * This method allows the gadget to communicate with player scripting.\n   * If the appropriate scripting is in place in the currently running template, calling this method\n   * will initiate a callback which can be acted upon in player script.\n   * \n   * @example\n   * client.callback('test', 'this');\n   * \n   * @param args variable number of arguments\n   */\n  public callback(...args: any[]): void {\n\n    this.getClient().then((client) => {\n\n      switch (args.length) {\n        case 0:\n          client.callback();\n          break;\n        case 1:\n          client.callback(args[0]);\n          break;\n        case 2:\n          client.callback(args[1]);\n          break;\n        case 3:\n          client.callback(args[2]);\n          break;\n        case 4:\n          client.callback(args[3]);\n          break;\n        case 5:\n          client.callback(args[4]);\n          break;\n      }\n    })\n  }\n\n  /**\n   * Accessor method for the user preferences interface exposed by the Gadgets API.\n   * \n   * See {@link https://developers.google.com/gadgets/docs/basic} for more details on the Gadgets API.\n   * \n   * @example\n   * constructor(public client: PlayerClientService) {\n   *            let prefs = client.getPrefs();\n   *            let myString = prefs.getString('myStringPref');\n   * }\n   * @returns {gadgets.Prefs} Gadget API Prefs object\n   */\n  public getPrefs(): gadgets.Prefs {\n\n    return new window['gadgets']['Prefs']();\n  }\n\n  /**\n   * Returns the current device time in ISO8601 format.\n   * Current device time is determined by the device timezone assigned to the device in the CMS.\n   * \n   * @param date Optional. If supplied will translate the supplied date/time to device time based on respective timezones.\n   * @returns Date/time in ISO8601 format\n   */\n  public async getDeviceTime(date?: Date): Promise {\n\n    const client = await this.getClient();\n\n    if (date !== undefined) {\n      return client.getDeviceTime(date);\n    }\n    return client.getDeviceTime();\n  }\n\n  /**\n   * Returns the timezone name currently assigned to the device.\n   * \n   * @returns Timezone Name\n   */\n  public async getDeviceTimeZoneName(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getDeviceTimeZoneName();\n  }\n\n  /**\n   * Returns the timezone ID currently assigned to the device.\n   * \n   * @returns Timezone ID\n   */\n  public async getDeviceTimeZoneID(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getDeviceTimeZoneID();\n  }\n\n  /**\n   * Returns the numerical offset from GMT of the timezone currently assigned to the device.\n   * \n   * @returns Timezone offset\n   */\n  public async getDeviceTimeZoneOffset(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getDeviceTimeZoneOffset();\n  }\n\n  /**\n   * Returns the language code of the language currently assigned to the device.\n   * \n   * @returns Language code\n   */\n  public async getLanguageCode(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getLanguageCode();\n  }\n\n  /**\n   * Returns the unique Revel Digital device key associated with the device.\n   * \n   * @returns Device key\n   */\n  public async getDeviceKey(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getDeviceKey();\n  }\n\n  /**\n   * Send a command to the player device.\n   * \n   * @param name Command name\n   * @param arg Command argument\n   */\n  public sendCommand(name: string, arg: string): void {\n\n    this.getClient().then((client) => {\n      client.sendCommand(name, arg);\n    })\n  }\n\n  /**\n   * Send a command to any remote player with the supplied device key(s).\n   * Note: Remote commands can only be delivered to devices within the same account as the sender device.\n   * \n   * @param deviceKeys Array of remote device keys\n   * @param name Command name\n   * @param arg Command arg\n   */\n  public sendRemoteCommand(deviceKeys: string[], name: string, arg: string): void {\n\n    this.getClient().then((client) => {\n      client.sendRemoteCommand(deviceKeys, name, arg);\n    });\n  }\n\n  /**\n   * Log an event for use with AdHawk analytics.\n   * Events are used for tracking various metrics including usage statistics, player condition, state changes, etc.\n   * \n   * @param eventName Unique name for this event\n   * @param properties A map of user defined properties to associate with this event\n   */\n  public track(eventName: string, properties?: EventProperties): void {\n\n    this.getClient().then((client) => {\n      client.track(eventName, JSON.stringify(properties));\n    })\n  }\n\n  /**\n   * Method for initiating a timed event.\n   * Timed events are useful for tracking the duration of an event and must be proceeded with a call to track().\n   * \n   * @example\n   * client.timeEvent('testEvent');\n   * client.track(\"test\", { \"a\": \"b\" });\n   * @param eventName Unique name for this event\n   */\n  public timeEvent(eventName: string): void {\n\n    this.getClient().then((client) => {\n      client.timeEvent(eventName);\n    })\n  }\n\n  /**\n   * A session is a way of grouping events together. Each event has an associated session ID.\n   * Session ID's are randomly generated and reset by subsequent calls to newEventSession().\n   * \n   * Each call to track() will utilize the same session ID, until another call to newEventSession().\n   * @param id Optional. User supplied session ID. If not supplied a random session ID will be generated.\n   */\n  public newEventSession(id?: string): void {\n\n    this.getClient().then((client) => {\n      if (id !== undefined) {\n        client.newEventSession();\n      } else {\n        client.newEventSession(id);\n      }\n    })\n  }\n\n  /**\n   * Returns the root folder utilized by this player device.\n   * \n   * @returns Path to the root folder\n   */\n  public async getRevelRoot(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getRevelRoot();\n  }\n\n  /**\n   * Returns a map of commands currently active for this device.\n   * \n   * @returns Map of commands currently active for this device.\n   */\n  public async getCommandMap(): Promise {\n\n    const client = await this.getClient();\n\n    return JSON.parse(await client.getCommandMap());\n  }\n\n  /**\n   * Indicate to the player that this gadget has finished it's visualization.\n   * This allows the player to proceed with the next item in a playlist if applicable.\n   */\n  public finish(): void {\n\n    this.getClient().then((client) => {\n\n      client.finish();\n    })\n  }\n\n  /**\n   * Check is the gadget is running in preview mode. Preview mode is enabled when the gadget is\n   * being edited in the CMS, or otherwise not running in a normal player environment.\n   * \n   * @returns True if the gadget is running in preview mode, false otherwise.\n   */\n  public async isPreviewMode(): Promise {\n\n    const client = await this.getClient();\n\n    return client instanceof NoopClient;\n  }\n\n    \n  // ---\n  // PRIVATE METHODS.\n  // ---\n  /** @ignore */\n  private getClient(): Promise {\n\n    if (this.clientPromise) {\n\n      return (this.clientPromise);\n    }\n\n    if (window.Client) {\n\n      return (this.clientPromise = Promise.resolve(window.Client));\n    }\n\n    // A \"complete\" status indicates that the \"load\" event has been fired on the\n    // window; and, that all sub-resources such as Scripts, Images, and Frames have\n    // been loaded.\n    if (window.document.readyState === \"complete\") {\n\n      // If this event has fired AND the 3rd-party script isn't available (see IF-\n      // condition BEFORE this one), it means that the 3rd-party script either\n      // failed on the network or was BLOCKED by an ad-blocker. As such, we have to\n      // fall-back to using a mock API.\n      return (this.clientPromise = Promise.resolve(new NoopClient()));\n    }\n\n    // ASSERT: If we made it this far, the document has not completed loading (but it\n    // may be in an \"interactive\" state which is when I believe that the Angular app\n    // gets bootstrapped). As such, we need bind to the LOAD event to wait for our\n    // third-party scripts to load (or fail to load, or be blocked).\n    this.clientPromise = new Promise(\n      (resolve) => {\n\n        window.addEventListener(\n          \"load\",\n          function handleWindowLoad() {\n\n            // At this point, the 3rd-party library is either available or\n            // it's not - there's no further loading to do. If it's not\n            // present on the global scope, we're going to fall-back to using\n            // a mock API.\n            resolve(window.Client || new NoopClient());\n          }\n        );\n\n      }\n    );\n\n    return (this.clientPromise);\n  }\n\n}\n\n\n\n// ----------------------------------------------------------------------------------- //\n// ----------------------------------------------------------------------------------- //\n\n// I provide a mock API for the 3rd-party script. This just allows the consuming code to\n// act as though the library is available even if it failed to load (example, it was\n// blocked by an ad-blocker).\n\n/** @ignore */\nclass NoopClient implements Client {\n\n  constructor() {\n\n    console.log(\n      '%cClient API not available, falling back to mock API',\n      'background-color:blue; color:yellow;'\n    );\n  }\n\n  public callback(...args: any[]): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public getDeviceTime(date?: Date): Promise {\n\n    return Promise.resolve(new Date().toISOString());\n  }\n\n  public async getDeviceTimeZoneName(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getDeviceTimeZoneID(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getDeviceTimeZoneOffset(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getLanguageCode(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getDeviceKey(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public sendCommand(name: string, arg: string): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public sendRemoteCommand(deviceKeys: string[], name: string, arg: string) {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public track(eventName: string, properties?: string): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public timeEvent(eventName: string): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public newEventSession(id?: string): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public async getRevelRoot(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getCommandMap(): Promise {\n\n    return Promise.resolve('{}');\n  }\n\n  public finish(): void {\n\n    // NOOP implement, nothing to do....\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgSafeStylePipeModule.html":{"url":"modules/NgSafeStylePipeModule.html","title":"module - NgSafeStylePipeModule","body":"\n                   \n\n\n\n\n    Modules\n    NgSafeStylePipeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgSafeStylePipeModule\n\n\n\ncluster_NgSafeStylePipeModule_declarations\n\n\n\ncluster_NgSafeStylePipeModule_exports\n\n\n\n\nSafeStylePipe\n\nSafeStylePipe\n\n\n\nNgSafeStylePipeModule\n\nNgSafeStylePipeModule\n\nNgSafeStylePipeModule -->\n\nSafeStylePipe->NgSafeStylePipeModule\n\n\n\n\n\nSafeStylePipe \n\nSafeStylePipe \n\nSafeStylePipe  -->\n\nNgSafeStylePipeModule->SafeStylePipe \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/reveldigital/player-client/src/lib/safe-style.pipe.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            SafeStylePipe\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SafeStylePipe\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform, NgModule } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * The safe style pipe is used when custom styles are defined for a gadget and must be applied to an Angular\n * component. This pipe will ensure the style can be appied safely by utilizing the DomSanitizer.\n * \n * @example\n * Sample Pref: {{ prefs.getString('myStringPref') }}\n */\n@Pipe({\n    name: 'safeStyle',\n})\nexport class SafeStylePipe implements PipeTransform {\n    constructor(private sanitized: DomSanitizer) { }\n\n    transform(value: any): unknown {\n        return this.sanitized.bypassSecurityTrustStyle(value);\n    }\n}\n\n@NgModule({\n    declarations: [SafeStylePipe],\n    exports: [SafeStylePipe],\n})\nexport class NgSafeStylePipeModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlayerClientModule.html":{"url":"modules/PlayerClientModule.html","title":"module - PlayerClientModule","body":"\n                   \n\n\n\n\n    Modules\n    PlayerClientModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PlayerClientModule\n\n\n\ncluster_PlayerClientModule_exports\n\n\n\n\nNgSafeStylePipeModule \n\nNgSafeStylePipeModule \n\n\n\nPlayerClientModule\n\nPlayerClientModule\n\nNgSafeStylePipeModule  -->\n\nPlayerClientModule->NgSafeStylePipeModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/reveldigital/player-client/src/lib/player-client.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            NgSafeStylePipeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { APP_INITIALIZER, LOCALE_ID, NgModule } from '@angular/core';\nimport { PlayerClientService } from './player-client.service';\nimport { AppInitService } from './app-init.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { APP_BASE_HREF } from '@angular/common';\nimport { NgSafeStylePipeModule } from './safe-style.pipe';\n\ndeclare var gadgets: any;\n\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n    RouterModule.forRoot([]),\n    NgSafeStylePipeModule\n  ],\n  exports: [\n    NgSafeStylePipeModule\n  ],\n  providers: [{\n    provide: APP_INITIALIZER,\n    useFactory: initializeApp,\n    deps: [AppInitService, PlayerClientService],\n    multi: true\n  },\n  {\n    provide: LOCALE_ID,\n    useFactory: () => {\n      try {\n        return new gadgets.Prefs().getLang();\n      } catch {\n        return 'en';\n      }\n    }\n  },\n  { provide: APP_BASE_HREF, useValue: '/gadgets/ifr' }]\n})\nexport class PlayerClientModule { }\n\nfunction initializeApp(appInitService: AppInitService) {\n  return async () => {\n    PlayerClientService.init({});\n    await appInitService.init();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlayerClientService.html":{"url":"injectables/PlayerClientService.html","title":"injectable - PlayerClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlayerClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/reveldigital/player-client/src/lib/player-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                onCommand$\n                            \n                            \n                                    Public\n                                onReady$\n                            \n                            \n                                    Public\n                                onStart$\n                            \n                            \n                                    Public\n                                onStop$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                callback\n                            \n                            \n                                    Public\n                                finish\n                            \n                            \n                                    Public\n                                    Async\n                                getCommandMap\n                            \n                            \n                                    Public\n                                    Async\n                                getDeviceKey\n                            \n                            \n                                    Public\n                                    Async\n                                getDeviceTime\n                            \n                            \n                                    Public\n                                    Async\n                                getDeviceTimeZoneID\n                            \n                            \n                                    Public\n                                    Async\n                                getDeviceTimeZoneName\n                            \n                            \n                                    Public\n                                    Async\n                                getDeviceTimeZoneOffset\n                            \n                            \n                                    Public\n                                    Async\n                                getLanguageCode\n                            \n                            \n                                    Public\n                                getPrefs\n                            \n                            \n                                    Public\n                                    Async\n                                getRevelRoot\n                            \n                            \n                                    Public\n                                    Async\n                                isPreviewMode\n                            \n                            \n                                    Public\n                                newEventSession\n                            \n                            \n                                    Public\n                                sendCommand\n                            \n                            \n                                    Public\n                                sendRemoteCommand\n                            \n                            \n                                    Public\n                                timeEvent\n                            \n                            \n                                    Public\n                                track\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        callback\n                        \n                    \n                \n            \n            \n                \n                    \n                    callback(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:187\n                \n            \n\n\n            \n                \n                    This method allows the gadget to communicate with player scripting.\nIf the appropriate scripting is in place in the currently running template, calling this method\nwill initiate a callback which can be acted upon in player script.\nclient.callback('test', 'this');\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        variable number of arguments\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            client.callback(&#39;test&#39;, &#39;this&#39;);\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        finish\n                        \n                    \n                \n            \n            \n                \n                    \n                    finish()\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:412\n                \n            \n\n\n            \n                \n                    Indicate to the player that this gadget has finished it's visualization.\nThis allows the player to proceed with the next item in a playlist if applicable.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getCommandMap\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCommandMap()\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:401\n                \n            \n\n\n            \n                \n                    Returns a map of commands currently active for this device.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Map of commands currently active for this device.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getDeviceKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDeviceKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:301\n                \n            \n\n\n            \n                \n                    Returns the unique Revel Digital device key associated with the device.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Device key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getDeviceTime\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDeviceTime(date?: Date)\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:238\n                \n            \n\n\n            \n                \n                    Returns the current device time in ISO8601 format.\nCurrent device time is determined by the device timezone assigned to the device in the CMS.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional. If supplied will translate the supplied date/time to device time based on respective timezones.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Date/time in ISO8601 format\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getDeviceTimeZoneID\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDeviceTimeZoneID()\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:265\n                \n            \n\n\n            \n                \n                    Returns the timezone ID currently assigned to the device.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Timezone ID\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getDeviceTimeZoneName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDeviceTimeZoneName()\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:253\n                \n            \n\n\n            \n                \n                    Returns the timezone name currently assigned to the device.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Timezone Name\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getDeviceTimeZoneOffset\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDeviceTimeZoneOffset()\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:277\n                \n            \n\n\n            \n                \n                    Returns the numerical offset from GMT of the timezone currently assigned to the device.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Timezone offset\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getLanguageCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLanguageCode()\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:289\n                \n            \n\n\n            \n                \n                    Returns the language code of the language currently assigned to the device.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Language code\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getPrefs\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrefs()\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:226\n                \n            \n\n\n            \n                \n                    Accessor method for the user preferences interface exposed by the Gadgets API.\nSee https://developers.google.com/gadgets/docs/basic for more details on the Gadgets API.\nconstructor(public client: PlayerClientService) {\n           let prefs = client.getPrefs();\n           let myString = prefs.getString('myStringPref');\n}\n\n                    \n                        Example :\n                        \n                            constructor(public client: PlayerClientService) {\n           let prefs = client.getPrefs();\n           let myString = prefs.getString(&#39;myStringPref&#39;);\n}\n                        \n                    \n                    \n                        Returns :         gadgets.Prefs\n\n                    \n                    \n                        Gadget API Prefs object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRevelRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRevelRoot()\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:389\n                \n            \n\n\n            \n                \n                    Returns the root folder utilized by this player device.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Path to the root folder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        isPreviewMode\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPreviewMode()\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:426\n                \n            \n\n\n            \n                \n                    Check is the gadget is running in preview mode. Preview mode is enabled when the gadget is\nbeing edited in the CMS, or otherwise not running in a normal player environment.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        True if the gadget is running in preview mode, false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        newEventSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    newEventSession(id?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:373\n                \n            \n\n\n            \n                \n                    A session is a way of grouping events together. Each event has an associated session ID.\nSession ID's are randomly generated and reset by subsequent calls to newEventSession().\nEach call to track() will utilize the same session ID, until another call to newEventSession().\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional. User supplied session ID. If not supplied a random session ID will be generated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sendCommand\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendCommand(name: string, arg: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:314\n                \n            \n\n\n            \n                \n                    Send a command to the player device.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Command name\n\n                                    \n                                \n                                \n                                    arg\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Command argument\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sendRemoteCommand\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendRemoteCommand(deviceKeys: string[], name: string, arg: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:329\n                \n            \n\n\n            \n                \n                    Send a command to any remote player with the supplied device key(s).\nNote: Remote commands can only be delivered to devices within the same account as the sender device.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    deviceKeys\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Array of remote device keys\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Command name\n\n                                    \n                                \n                                \n                                    arg\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Command arg\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        timeEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    timeEvent(eventName: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:359\n                \n            \n\n\n            \n                \n                    Method for initiating a timed event.\nTimed events are useful for tracking the duration of an event and must be proceeded with a call to track().\nclient.timeEvent('testEvent');\nclient.track(\"test\", { \"a\": \"b\" });\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique name for this event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            client.timeEvent(&#39;testEvent&#39;);\nclient.track(&quot;test&quot;, { &quot;a&quot;: &quot;b&quot; });\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        track\n                        \n                    \n                \n            \n            \n                \n                    \n                    track(eventName: string, properties?: EventProperties)\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:343\n                \n            \n\n\n            \n                \n                    Log an event for use with AdHawk analytics.\nEvents are used for tracking various metrics including usage statistics, player condition, state changes, etc.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique name for this event\n\n                                    \n                                \n                                \n                                    properties\n                                    \n                                                EventProperties\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A map of user defined properties to associate with this event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        onCommand$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:71\n                        \n                    \n\n            \n                \n                    Commands sent to this player.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        onReady$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:75\n                        \n                    \n\n            \n                \n                    Signals the gadget has been loaded and is ready to start.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        onStart$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:79\n                        \n                    \n\n            \n                \n                    Signals the gadget has been started by the player.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        onStop$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in projects/reveldigital/player-client/src/lib/player-client.service.ts:83\n                        \n                    \n\n            \n                \n                    Signals the gadgets has been stopped by the player.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NgZone, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, fromEvent, Subject, Subscription } from 'rxjs';\nimport { map, share, tap } from 'rxjs/operators';\nimport { gadgets } from '@reveldigital/gadget-types';\n\n\n// So that TypeScript doesn't complain, we're going to augment the GLOBAL / WINDOW \n// name-space definition to include the Tracker API. This also provides us with a place\n// to actually DOCUMENT the API so that our developers aren't guessing about what's\n// available on the library.\n\n/** @ignore */\ndeclare global {\n  var Client: Client;\n}\n\n/** @ignore */\nexport interface Client {\n\n  callback(...args: any[]): void;\n\n  getDeviceTime(date?: Date): Promise;\n\n  getDeviceTimeZoneName(): Promise;\n\n  getDeviceTimeZoneID(): Promise;\n\n  getDeviceTimeZoneOffset(): Promise;\n\n  getLanguageCode(): Promise;\n\n  getDeviceKey(): Promise;\n\n  sendCommand(name: string, arg: string): void;\n\n  sendRemoteCommand(deviceKeys: string[], name: string, arg: string): void;\n\n  track(eventName: string, properties?: string): void;\n\n  timeEvent(eventName: string): void;\n\n  newEventSession(id?: string): void;\n\n  getRevelRoot(): Promise;\n\n  getCommandMap(): Promise;\n\n  finish(): void;\n}\n\nexport interface EventProperties {\n  [key: string]: any;\n}\n\nexport interface Command {\n  name: string;\n  arg: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayerClientService implements OnDestroy {\n\n  /** @ignore */\n  private clientPromise: Promise | null;\n\n  /**\n   * Commands sent to this player.\n   */\n  public onCommand$ = new Subject();\n  /**\n   * Signals the gadget has been loaded and is ready to start.\n   */\n  public onReady$ = new BehaviorSubject(false);\n  /**\n   * Signals the gadget has been started by the player.\n   */\n  public onStart$ = new Subject();\n  /**\n   * Signals the gadgets has been stopped by the player.\n   */\n  public onStop$ = new Subject();\n\n  //\n  // Two methods available for calling into the library:\n  //\n  // 1) Using dispatchEvent() with the following custom events\n  // 2) Using the window scoped RevelDigital object as defined in the constructor\n  //\n  /** @ignore */\n  private onStartSub: Subscription;\n  /** @ignore */\n  private onStartEvt$ = fromEvent(document, 'RevelDigital.Start').pipe(\n    share(),\n    tap(this.onStart$)\n  );\n  /** @ignore */\n  private onStopSub: Subscription;\n  /** @ignore */\n  private onStopEvt$ = fromEvent(document, 'RevelDigital.Stop').pipe(\n    share(),\n    tap(this.onStop$)\n  );\n  /** @ignore */\n  private onCommandSub: Subscription;\n  /** @ignore */\n  private onCommandEvt$ = fromEvent(document, 'RevelDigital.Command').pipe(\n    map((e: any) => { return { name: e.detail.name, arg: e.detail.arg } as Command }),\n    share(),\n    tap(this.onCommand$)\n  );\n\n  // private onPostMessageSub: Subscription;\n  // private onPostMessageEvt$ = fromEvent(window, 'message').pipe(\n  //   filter((messageEvent: MessageEvent) =>\n  //     messageEvent.source !== window.parent &&\n  //     typeof messageEvent.data === 'string' &&\n  //     messageEvent.data.startsWith('reveldigital:')),\n  //   map((e: any) => { return JSON.parse(e.substring(13)) as Command }),\n  //   share(),\n  //   tap(this.onCommand$)\n  // );\n\n  /** @ignore */\n  constructor(zone: NgZone) {\n\n    let self = this;\n    (window as any).RevelDigital = {\n      Controller: {\n        onCommand: function (name: string, arg: string) {\n          zone.run(() => {\n            self.onCommand$.next({ name: name, arg: arg });\n          });\n        },\n        onStart: function () {\n          zone.run(() => {\n            self.onStart$.next(null);\n          });\n        },\n        onStop: function () {\n          zone.run(() => {\n            self.onStop$.next(null);\n          });\n        }\n      }\n    }\n\n    this.onStartSub = this.onStartEvt$.subscribe(() => { });\n    this.onStopSub = this.onStopEvt$.subscribe(() => { });\n    this.onCommandSub = this.onCommandEvt$.subscribe(() => { });\n\n    this.clientPromise = null;\n\n    this.onReady$.next(true);\n  }\n\n  /** @ignore */\n  ngOnDestroy(): void {\n\n    this.onStartSub?.unsubscribe();\n    this.onStopSub?.unsubscribe();\n    this.onCommandSub?.unsubscribe();\n\n    this.onReady$.next(false);\n  }\n\n  /** @ignore */\n  public static init(data: any) {\n\n    console.log(\n      '%c⚙️ Initializing Revel Digital client library',\n      'background-color:blue; color:yellow;'\n    );\n  }\n\n  /**\n   * This method allows the gadget to communicate with player scripting.\n   * If the appropriate scripting is in place in the currently running template, calling this method\n   * will initiate a callback which can be acted upon in player script.\n   * \n   * @example\n   * client.callback('test', 'this');\n   * \n   * @param args variable number of arguments\n   */\n  public callback(...args: any[]): void {\n\n    this.getClient().then((client) => {\n\n      switch (args.length) {\n        case 0:\n          client.callback();\n          break;\n        case 1:\n          client.callback(args[0]);\n          break;\n        case 2:\n          client.callback(args[1]);\n          break;\n        case 3:\n          client.callback(args[2]);\n          break;\n        case 4:\n          client.callback(args[3]);\n          break;\n        case 5:\n          client.callback(args[4]);\n          break;\n      }\n    })\n  }\n\n  /**\n   * Accessor method for the user preferences interface exposed by the Gadgets API.\n   * \n   * See {@link https://developers.google.com/gadgets/docs/basic} for more details on the Gadgets API.\n   * \n   * @example\n   * constructor(public client: PlayerClientService) {\n   *            let prefs = client.getPrefs();\n   *            let myString = prefs.getString('myStringPref');\n   * }\n   * @returns {gadgets.Prefs} Gadget API Prefs object\n   */\n  public getPrefs(): gadgets.Prefs {\n\n    return new window['gadgets']['Prefs']();\n  }\n\n  /**\n   * Returns the current device time in ISO8601 format.\n   * Current device time is determined by the device timezone assigned to the device in the CMS.\n   * \n   * @param date Optional. If supplied will translate the supplied date/time to device time based on respective timezones.\n   * @returns Date/time in ISO8601 format\n   */\n  public async getDeviceTime(date?: Date): Promise {\n\n    const client = await this.getClient();\n\n    if (date !== undefined) {\n      return client.getDeviceTime(date);\n    }\n    return client.getDeviceTime();\n  }\n\n  /**\n   * Returns the timezone name currently assigned to the device.\n   * \n   * @returns Timezone Name\n   */\n  public async getDeviceTimeZoneName(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getDeviceTimeZoneName();\n  }\n\n  /**\n   * Returns the timezone ID currently assigned to the device.\n   * \n   * @returns Timezone ID\n   */\n  public async getDeviceTimeZoneID(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getDeviceTimeZoneID();\n  }\n\n  /**\n   * Returns the numerical offset from GMT of the timezone currently assigned to the device.\n   * \n   * @returns Timezone offset\n   */\n  public async getDeviceTimeZoneOffset(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getDeviceTimeZoneOffset();\n  }\n\n  /**\n   * Returns the language code of the language currently assigned to the device.\n   * \n   * @returns Language code\n   */\n  public async getLanguageCode(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getLanguageCode();\n  }\n\n  /**\n   * Returns the unique Revel Digital device key associated with the device.\n   * \n   * @returns Device key\n   */\n  public async getDeviceKey(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getDeviceKey();\n  }\n\n  /**\n   * Send a command to the player device.\n   * \n   * @param name Command name\n   * @param arg Command argument\n   */\n  public sendCommand(name: string, arg: string): void {\n\n    this.getClient().then((client) => {\n      client.sendCommand(name, arg);\n    })\n  }\n\n  /**\n   * Send a command to any remote player with the supplied device key(s).\n   * Note: Remote commands can only be delivered to devices within the same account as the sender device.\n   * \n   * @param deviceKeys Array of remote device keys\n   * @param name Command name\n   * @param arg Command arg\n   */\n  public sendRemoteCommand(deviceKeys: string[], name: string, arg: string): void {\n\n    this.getClient().then((client) => {\n      client.sendRemoteCommand(deviceKeys, name, arg);\n    });\n  }\n\n  /**\n   * Log an event for use with AdHawk analytics.\n   * Events are used for tracking various metrics including usage statistics, player condition, state changes, etc.\n   * \n   * @param eventName Unique name for this event\n   * @param properties A map of user defined properties to associate with this event\n   */\n  public track(eventName: string, properties?: EventProperties): void {\n\n    this.getClient().then((client) => {\n      client.track(eventName, JSON.stringify(properties));\n    })\n  }\n\n  /**\n   * Method for initiating a timed event.\n   * Timed events are useful for tracking the duration of an event and must be proceeded with a call to track().\n   * \n   * @example\n   * client.timeEvent('testEvent');\n   * client.track(\"test\", { \"a\": \"b\" });\n   * @param eventName Unique name for this event\n   */\n  public timeEvent(eventName: string): void {\n\n    this.getClient().then((client) => {\n      client.timeEvent(eventName);\n    })\n  }\n\n  /**\n   * A session is a way of grouping events together. Each event has an associated session ID.\n   * Session ID's are randomly generated and reset by subsequent calls to newEventSession().\n   * \n   * Each call to track() will utilize the same session ID, until another call to newEventSession().\n   * @param id Optional. User supplied session ID. If not supplied a random session ID will be generated.\n   */\n  public newEventSession(id?: string): void {\n\n    this.getClient().then((client) => {\n      if (id !== undefined) {\n        client.newEventSession();\n      } else {\n        client.newEventSession(id);\n      }\n    })\n  }\n\n  /**\n   * Returns the root folder utilized by this player device.\n   * \n   * @returns Path to the root folder\n   */\n  public async getRevelRoot(): Promise {\n\n    const client = await this.getClient();\n\n    return client.getRevelRoot();\n  }\n\n  /**\n   * Returns a map of commands currently active for this device.\n   * \n   * @returns Map of commands currently active for this device.\n   */\n  public async getCommandMap(): Promise {\n\n    const client = await this.getClient();\n\n    return JSON.parse(await client.getCommandMap());\n  }\n\n  /**\n   * Indicate to the player that this gadget has finished it's visualization.\n   * This allows the player to proceed with the next item in a playlist if applicable.\n   */\n  public finish(): void {\n\n    this.getClient().then((client) => {\n\n      client.finish();\n    })\n  }\n\n  /**\n   * Check is the gadget is running in preview mode. Preview mode is enabled when the gadget is\n   * being edited in the CMS, or otherwise not running in a normal player environment.\n   * \n   * @returns True if the gadget is running in preview mode, false otherwise.\n   */\n  public async isPreviewMode(): Promise {\n\n    const client = await this.getClient();\n\n    return client instanceof NoopClient;\n  }\n\n    \n  // ---\n  // PRIVATE METHODS.\n  // ---\n  /** @ignore */\n  private getClient(): Promise {\n\n    if (this.clientPromise) {\n\n      return (this.clientPromise);\n    }\n\n    if (window.Client) {\n\n      return (this.clientPromise = Promise.resolve(window.Client));\n    }\n\n    // A \"complete\" status indicates that the \"load\" event has been fired on the\n    // window; and, that all sub-resources such as Scripts, Images, and Frames have\n    // been loaded.\n    if (window.document.readyState === \"complete\") {\n\n      // If this event has fired AND the 3rd-party script isn't available (see IF-\n      // condition BEFORE this one), it means that the 3rd-party script either\n      // failed on the network or was BLOCKED by an ad-blocker. As such, we have to\n      // fall-back to using a mock API.\n      return (this.clientPromise = Promise.resolve(new NoopClient()));\n    }\n\n    // ASSERT: If we made it this far, the document has not completed loading (but it\n    // may be in an \"interactive\" state which is when I believe that the Angular app\n    // gets bootstrapped). As such, we need bind to the LOAD event to wait for our\n    // third-party scripts to load (or fail to load, or be blocked).\n    this.clientPromise = new Promise(\n      (resolve) => {\n\n        window.addEventListener(\n          \"load\",\n          function handleWindowLoad() {\n\n            // At this point, the 3rd-party library is either available or\n            // it's not - there's no further loading to do. If it's not\n            // present on the global scope, we're going to fall-back to using\n            // a mock API.\n            resolve(window.Client || new NoopClient());\n          }\n        );\n\n      }\n    );\n\n    return (this.clientPromise);\n  }\n\n}\n\n\n\n// ----------------------------------------------------------------------------------- //\n// ----------------------------------------------------------------------------------- //\n\n// I provide a mock API for the 3rd-party script. This just allows the consuming code to\n// act as though the library is available even if it failed to load (example, it was\n// blocked by an ad-blocker).\n\n/** @ignore */\nclass NoopClient implements Client {\n\n  constructor() {\n\n    console.log(\n      '%cClient API not available, falling back to mock API',\n      'background-color:blue; color:yellow;'\n    );\n  }\n\n  public callback(...args: any[]): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public getDeviceTime(date?: Date): Promise {\n\n    return Promise.resolve(new Date().toISOString());\n  }\n\n  public async getDeviceTimeZoneName(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getDeviceTimeZoneID(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getDeviceTimeZoneOffset(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getLanguageCode(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getDeviceKey(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public sendCommand(name: string, arg: string): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public sendRemoteCommand(deviceKeys: string[], name: string, arg: string) {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public track(eventName: string, properties?: string): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public timeEvent(eventName: string): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public newEventSession(id?: string): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public async getRevelRoot(): Promise {\n\n    return Promise.resolve(null);\n  }\n\n  public async getCommandMap(): Promise {\n\n    return Promise.resolve('{}');\n  }\n\n  public finish(): void {\n\n    // NOOP implement, nothing to do....\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/SafeStylePipe.html":{"url":"pipes/SafeStylePipe.html","title":"pipe - SafeStylePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  SafeStylePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/reveldigital/player-client/src/lib/safe-style.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                The safe style pipe is used when custom styles are defined for a gadget and must be applied to an Angular\ncomponent. This pipe will ensure the style can be appied safely by utilizing the DomSanitizer.\nSample Pref: {{ prefs.getString('myStringPref') }}\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        safeStyle\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/reveldigital/player-client/src/lib/safe-style.pipe.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform, NgModule } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * The safe style pipe is used when custom styles are defined for a gadget and must be applied to an Angular\n * component. This pipe will ensure the style can be appied safely by utilizing the DomSanitizer.\n * \n * @example\n * Sample Pref: {{ prefs.getString('myStringPref') }}\n */\n@Pipe({\n    name: 'safeStyle',\n})\nexport class SafeStylePipe implements PipeTransform {\n    constructor(private sanitized: DomSanitizer) { }\n\n    transform(value: any): unknown {\n        return this.sanitized.bypassSecurityTrustStyle(value);\n    }\n}\n\n@NgModule({\n    declarations: [SafeStylePipe],\n    exports: [SafeStylePipe],\n})\nexport class NgSafeStylePipeModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/reveldigital/player-client/src/lib/app-init.service.ts\n            \n            variable\n            isLocal\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/reveldigital/player-client/src/lib/player-client.module.ts\n            \n            function\n            initializeApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/reveldigital/player-client/src/lib/player-client.module.ts\n            \n            variable\n            gadgets\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/reveldigital/player-client/src/lib/player-client.service.ts\n            \n            injectable\n            PlayerClientService\n            \n                95 %\n                (21/22)\n            \n        \n        \n            \n                \n                projects/reveldigital/player-client/src/lib/player-client.service.ts\n            \n            interface\n            Command\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                projects/reveldigital/player-client/src/lib/player-client.service.ts\n            \n            interface\n            EventProperties\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/reveldigital/player-client/src/lib/player-client.service.ts\n            \n            variable\n            Client\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/reveldigital/player-client/src/lib/safe-style.pipe.ts\n            \n            pipe\n            SafeStylePipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/reveldigital/player-client/src/test.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/reveldigital/player-client/src/test.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^13.0.0\n        \n            @angular/common : ^13.0.0\n        \n            @angular/compiler : ^13.0.0\n        \n            @angular/core : ^13.0.0\n        \n            @angular/forms : ^13.0.0\n        \n            @angular/localize : ^13.0.0\n        \n            @angular/platform-browser : ^13.0.0\n        \n            @angular/platform-browser-dynamic : ^13.0.0\n        \n            @angular/router : ^13.0.0\n        \n            classlist.js : 1.1.20150312\n        \n            rxjs : ~7.4.0\n        \n            systemjs : 6.13.0\n        \n            tslib : ^2.4.1\n        \n            webfontloader : 1.6.28\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            initializeApp   (projects/.../player-client.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/reveldigital/player-client/src/lib/player-client.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initializeApp\n                        \n                    \n                \n            \n            \n                \ninitializeApp(appInitService: AppInitService)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    appInitService\n                                    \n                                            AppInitService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nRevel Digital gadget library for Angular\nAngular library for building custom Revel Digital gadgets. This library simplies the player/gadget interface making it easier\nto build full featured gadgets utilizing the Angular framework.\nQuickstart\nNew to Angular? Check out the Angular documentation for getting your environment configured for development.\nStep 1. GitHub Repository Creation (Optional)\nNot hosting your app on Github? Skip to step #2.\nCreate a new repository on GitHub.com. For more information, see \"Creating a new repository.\"\nCopy your remote repository URL\n\ngit remote add origin \n# Sets the new remote\ngit remote -v\n# Verifies the new remote URLStep 2. Create a new Angular app\nFrom within your working folder, run the following Angular CLI command using the name of your app.\nng new my-app --directory ./\n# Generates the boilerplate code for a new Angular appStep 3. Add the Revel Digital libaries\nRun the Revel Digital angular schematic which will configure your app for use as a Revel Digital gadget.\nng add @reveldigital/player-client@latest\n# Run the Revel Digital Angular schematicStep 4. Build\nThe build script will generate the Angular app along with a the gadget XML definition file.\nnpm run build:gadget\n# Run the gadget build scriptStep 5. Deploy\nThe app can be hosted using any number of hosting services, however the provided schematic includes a simplified option for publishing to GitHub Pages.\nAssuming your working folder is associated with your GitHub repository, simply run the following command to deploy the app to the gh-pages branch. The gadget app and associated XML file will be publicly visibile and available for use in your signage.\nnpm run deploy:gadget\n# Deploy to GitHub PagesSample usage\nThe majority of the functionality is contained within the PlayerClientService. The service and supporting library exposes the following functionality:\n\nMethods for obtaining player details such as device time, locale, etc\nMethods for interfacting with the player including sending commands and calling into player scripting\nPlayer lifecycle methods (ready/start/stop)\nGadget property accessors such as user preferences\nMiscellaneous helpers such as the SafeStyle pipe\n\nSimply inject this service in your Angular component constructor in order to access the player client interface.\n  constructor(public client: PlayerClientService) {\n\n    this.prefs = client.getPrefs();\n    \n    this.style = this.prefs.getString('myStylePref');\n    \n    this.client.onReady$.subscribe((val) => {\n      console.log(val ? 'Ready' : 'Not ready');\n    });\n\n    this.client.onCommand$.subscribe((cmd) => {\n      console.log(`onCommand: ${cmd.name}, ${cmd.arg}`);\n    });\n\n    this.client.onStart$.subscribe(() => {\n      console.log(\"onStart\");\n    });\n\n    this.client.onStop$.subscribe(() => {\n      console.log(\"onStop\");\n    });\n  }Gadget Definition & Preferences\nThe assets/gadget.yaml file is the definition file for your gadget, responsible for defining the basic properties and features of the gadget as presented to the user. These properties include the gadget name, description, support URL, and preferences. A sample gadgets.yaml file is included in your project after running the schematic.\nPreferences are the primary method for providing customization options of your gadget. They allow signage designers to change and preview gadget properties at design time within the Revel Digital CMS.\nThe following is the sample gadgets.yaml included with the schematic:\n# Basic properties of the gadget must include the following:\n#   title: Title of the gadget as it will appear in the Revel Digital CMS UX\n#   title_url: Optional support URL for the gadget\n#   description: Details of the gadget. Will appear within the Revel Digital CMS\n#   author: Name of author or organization credited with developing the gadget\n#   background: (Deprecated) should always be transparent for most gadgets\n#\ntitle: My Gadget\ntitle_url: https://mysupporturl.org\ndescription: Describe the purpose of your gadget here\nauthor: My Organization\nbackground: transparent\n\n# Requirements enable certain features of the gadget. Available options include:\n#   reveldigital (core Revel Digital features)\n#   offline (Enable service worker caching for offline support)\n#   webfont (Enable Google WebFonts for dynamic font loading)\n#   moment (Enable the moment library for localized date/time, initialized with device timezone)\n#   jquery (Enable the jQuery libary)\n#\nrequirements:\n  - reveldigital\n  - offline\n  - webfont\n  - moment\n  - jquery\n\n# Locales are use for localization within the gadget definition (XML) itself.\n#  Docs for using the Gadget API for i18n are available here: https://developers.google.com/gadgets/docs/i18n\n#\n# Angular applications should use the i18n support provided by the Angular framework:\n#  https://angular.io/guide/i18n-overview\n#\nlocales:\n  - messages: https://reveldigital.github.io/reveldigital-gadgets/ALL_ALL.xml\n\n  - lang: fr\n    messages: https://reveldigital.github.io/reveldigital-gadgets/ALL_ALL.xml\n\n# Preferences provide customization options for the gadget and are accessible at both design time and runtime.\n#\n# Propreties of a preference include:\n#   name: Unique name or ID for the preference\n#   display_name: Name as shown in the UX\n#   datatype: string, enum, hidden, bool, style, list\n#   default_value: Default value\n#   required: Make this prefence mandatory, must have a value\n#   depends: The visibility of this preference depends on other preferences. This requires the name\n#     of the dependent preference along with a list of values. Condition types can include\n#     any_of, all_of, none_of. Nested depends conditions are also supported.\n#\nprefs:\n  - name: myStringPref\n    display_name: Sample string preference\n    datatype: string\n    default_value: test string\n    required: true\n\n  - name: myBoolPref\n    display_name: Sample boolean preference\n    datatype: bool\n    default_value: true\n    required: true\n    depends:\n      - name: myEnumPref\n        any_of:\n          - values:\n            - fast\n          \n  - name: myStylePref\n    display_name: Sample style preference\n    datatype: style\n    default_value: font-family:Verdana;color:rgb(255, 255, 255);font-size:18px;\n    required: true\n\n  - name: myEnumPref\n    display_name: Sample enum preference\n    datatype: enum\n    default_value: fast\n    required: true\n    multiple: false\n    options:\n      - value: fastest\n        display_value: Fastest\n      - value: fast\n        display_value: Fast\n      - value: medium\n        display_value: Medium\n\n  - name: myListPref\n    display_name: Sample list preference\n    datatype: list\n    default_value: dog|cat\n    required: falseThis definition file results in the following user experience when designing your gadget in a template:\n\nYou will see the preferences exposed in the editor which can then be modified at design time.\nIndividual preferences are able to be accessed in your gadget code like so:\nthis.prefs = client.getPrefs();\n\nthis.prefs.getString('myStringPref');\nthis.prefs.getBool('myBoolPref');\nthis.prefs.getFloat('myFloatPref');\nthis.prefs.getInt('myIntPref');\nthis.prefs.getArray('myListPref');Angular Library Documentation\nLibrary documentation is available here: https://reveldigital.github.io/reveldigital-client-library/\nA sample Angular app is available in this repo under https://github.com/RevelDigital/reveldigital-client-library/tree/master/projects/test-app.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgSafeStylePipeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlayerClientModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgSafeStylePipeModule\n\n\n\ncluster_NgSafeStylePipeModule_declarations\n\n\n\ncluster_NgSafeStylePipeModule_exports\n\n\n\ncluster_PlayerClientModule\n\n\n\ncluster_PlayerClientModule_exports\n\n\n\n\nSafeStylePipe\n\nSafeStylePipe\n\n\n\nNgSafeStylePipeModule\n\nNgSafeStylePipeModule\n\nNgSafeStylePipeModule -->\n\nSafeStylePipe->NgSafeStylePipeModule\n\n\n\n\n\nSafeStylePipe \n\nSafeStylePipe \n\nSafeStylePipe  -->\n\nNgSafeStylePipeModule->SafeStylePipe \n\n\n\n\n\nNgSafeStylePipeModule \n\nNgSafeStylePipeModule \n\n\n\nPlayerClientModule\n\nPlayerClientModule\n\nNgSafeStylePipeModule  -->\n\nPlayerClientModule->NgSafeStylePipeModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Client   (projects/.../player-client.service.ts)\n                        \n                        \n                            context   (projects/.../test.ts)\n                        \n                        \n                            gadgets   (projects/.../player-client.module.ts)\n                        \n                        \n                            isLocal   (projects/.../app-init.service.ts)\n                        \n                        \n                            require   (projects/.../test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/reveldigital/player-client/src/lib/player-client.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Client\n\n                    \n                \n\n\n        \n    \n\n    projects/reveldigital/player-client/src/test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require.context('./', true, /\\.spec\\.ts$/)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n\n\n        \n    \n\n    projects/reveldigital/player-client/src/lib/player-client.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        gadgets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    projects/reveldigital/player-client/src/lib/app-init.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isLocal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : /localhost/.test(document.location.host)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
